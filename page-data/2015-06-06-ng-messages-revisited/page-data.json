{"componentChunkName":"component---src-templates-blog-post-js","path":"/2015-06-06-ng-messages-revisited/","webpackCompilationHash":"0c5d630095500f933ccd","result":{"data":{"site":{"siteMetadata":{"title":"Articles by thoughtram","authors":[{"id":"pascal_precht","name":"Pascal Precht","twitter":"PascalPrecht","img":"https://avatars2.githubusercontent.com/u/445106?s=460&v=4"},{"id":"christoph_burgdorf","name":"Christoph Burgdorf","twitter":"cburgdorf","img":"https://avatars0.githubusercontent.com/u/521109?s=460&v=4"},{"id":"dominic_elm","name":"Dominic Elm","twitter":"d3lm","img":"https://avatars0.githubusercontent.com/u/12571019?s=400&v=4"},{"id":"thomas_burleson","name":"Thomas Burleson","twitter":"thomasburleson","img":"https://avatars3.githubusercontent.com/u/210413?s=400&v=4"},{"id":"elvira_eulitz","name":"Elvira Eulitz","twitter":"ElviraEulitz","img":"https://avatars3.githubusercontent.com/u/29247040?s=400&v=4"},{"id":"maxim_koretskyi","name":"Maxim Koretskyi","twitter":"maxim_koretskyi","img":"https://avatars3.githubusercontent.com/u/6124091?s=400&v=4"}]}},"markdownRemark":{"id":"9992196a-6209-545e-bcf6-4dc2d7862dcf","excerpt":"If you’ve followed our series on Exploring Angular 1.3, you know that we’ve written an article about a new module that has been introduced then, called…","html":"<p>If you’ve followed our series on <a href=\"/exploring-angular-1.3\">Exploring Angular 1.3</a>, you know that we’ve written an <a href=\"/angularjs/2015/01/23/exploring-angular-1.3-ngMessages.html\">article</a> about a new module that has been introduced then, called ngMessages. If you haven’t read that article we highly recommend checking it out, since this article builds on top of that.</p>\n<p>Angular 1.4 has been released just a few days ago and weeks before that, there were several beta releases so we could make our feet wet with it. Next to a ton of improvements, bug fixes and features, this release also introduces a couple of minor breaking changes. In this article we discuss the latest changes to the ngMessages module, so you can update your application code accordingly.</p>\n<h2>ngMessagesInclude no longer an attribute</h2>\n<p>In applications where more than just a single form exists, we might want to reuse message templates. E.g. if we have an input field that is required, we want to display an error message that says so, in case the user forgets to enter anything. Such required fields appear very often in forms, so it would be quite cumbersome if we would have to define the same error message in a template over and over again.</p>\n<p>To solve that issue, there was an <code class=\"language-text\">ngMessagesInclude</code> attribute, which we could use in combination with the <code class=\"language-text\">ngMessages</code> directive, to include existing templates in other <code class=\"language-text\">ngMessages</code> container.</p>\n<p>To illustrate this scenario, here’s what such a template definition could look like:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>script/ng-template<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>required-message<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token operator\">&lt;</span>ng<span class=\"token operator\">-</span>message when<span class=\"token operator\">=</span><span class=\"token string\">\"required\"</span><span class=\"token operator\">></span>\n    This field is required<span class=\"token operator\">!</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ng<span class=\"token operator\">-</span>message<span class=\"token operator\">></span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>It’s an overloaded <code class=\"language-text\">script</code> tag that has an <code class=\"language-text\">id</code> attribute so we can refer to it later, and in that script we can just define a template. In order to (re)use that template, all we had to do, was to use the <code class=\"language-text\">ngMessagesInclude</code> attribute like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ng-messages</span> <span class=\"token attr-name\">ng-messages-include</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>required-message<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>otherForm.field.$error<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  ...\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ng-messages</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>What happens here, is that we just have our <code class=\"language-text\">ngMessages</code> container to display messages, but in addition to that, an existing template will be automatically included and activated. Included templates have always been added to the <strong>bottom</strong> of the <code class=\"language-text\">ngMessages</code> container.</p>\n<p><strong>In Angular 1.4, this has changed</strong>. <code class=\"language-text\">ngMessagesInclude</code> is no longer an attribute but a directive. Which means, if we want to use it the same way, instead of adding an attribute to the <code class=\"language-text\">ngMessages</code> container, we have to add the <code class=\"language-text\">ngMessagesInclude</code> directive as a child element to the container like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ng-messages</span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>otherForm.field.$error<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">ng-message</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>minlength<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>...<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">ng-messages-include</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>required-message<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ng-messages</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Of course, this gives us much better control over what happens inside the <code class=\"language-text\">ngMessages</code> container. Don’t forget that the order of <code class=\"language-text\">ngMessage</code> directives inside a container configures the priority of each message.</p>\n<h2>Dynamic Message resolution</h2>\n<p>A better method to include existing message templates is already great, but the framework could do better. Even if <code class=\"language-text\">ngMessages</code> as a whole is a very nice and useful extension, it turns out that there was one issue with it, that should have been supported out of the box based on the nature of Angular.</p>\n<p>It was not possible to pass expressions to <code class=\"language-text\">ngMessage</code> directives, that evaluate to any kind of error type. This restricted us to only define static templates for each error message, which not only means we had to type more, it’s also not possible to render error messages dynamically that come from a server. In addition to that, it was not possible to use directives on ngMessages that do structure changes to the DOM (e.g. <code class=\"language-text\">ngIf</code>, <code class=\"language-text\">ngRepeat</code>).</p>\n<p><strong>Angular 1.4 fixes that issue</strong>. It introduces another directive called <code class=\"language-text\">ngMessageExp</code> which gets an expression that evaluates to an error type, so we can dynamically display messages. Combined with directives that do structural changes to the DOM, this can be very powerful. Just imagine you’d get a list of error messages back from a server due to asynchronous validation. With the new added features, this can easily be implemented like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ng-messages</span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>otherForm.field.$error<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">ng-repeat</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>errorMessage in errorMessages<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">ng-message-exp</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>errorMessage.type<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n      {{errorMessage.text}}\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ng-messages</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>We can simply iterate over a collection of messages using <code class=\"language-text\">ngRepeat</code> and dynamically display error messages based on the collection’s message objects. Super powerful.</p>","frontmatter":{"author":"pascal_precht","title":"ngMessages revisited","imageUrl":null,"date":"06 June 2015","summary":"With the release of Angular 1.4, a few changes landed that affect the ngMessages module. This article discusses what has changed.","categories":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2015-06-06-ng-messages-revisited/","previous":{"fields":{"slug":"/angular/2015/05/18/dependency-injection-in-angular-2.html"},"frontmatter":{"date":"2015/05/18","title":"Dependency Injection in Angular","categories":["angular"]}},"next":{"fields":{"slug":"/angular/2015/06/16/routing-in-angular-2.html"},"frontmatter":{"date":"2015/06/16","title":"Routing in Angular","categories":["angular"]}}}}}