{"componentChunkName":"component---src-templates-blog-post-js","path":"/angular/2015/03/27/building-a-zippy-component-in-angular-2.html","webpackCompilationHash":"0c5d630095500f933ccd","result":{"data":{"site":{"siteMetadata":{"title":"Articles by thoughtram","authors":[{"id":"pascal_precht","name":"Pascal Precht","twitter":"PascalPrecht","img":"https://avatars2.githubusercontent.com/u/445106?s=460&v=4"},{"id":"christoph_burgdorf","name":"Christoph Burgdorf","twitter":"cburgdorf","img":"https://avatars0.githubusercontent.com/u/521109?s=460&v=4"},{"id":"dominic_elm","name":"Dominic Elm","twitter":"d3lm","img":"https://avatars0.githubusercontent.com/u/12571019?s=400&v=4"},{"id":"thomas_burleson","name":"Thomas Burleson","twitter":"thomasburleson","img":"https://avatars3.githubusercontent.com/u/210413?s=400&v=4"},{"id":"elvira_eulitz","name":"Elvira Eulitz","twitter":"ElviraEulitz","img":"https://avatars3.githubusercontent.com/u/29247040?s=400&v=4"},{"id":"maxim_koretskyi","name":"Maxim Koretskyi","twitter":"maxim_koretskyi","img":"https://avatars3.githubusercontent.com/u/6124091?s=400&v=4"}]}},"markdownRemark":{"id":"ac6fcbe9-5398-5f8e-b62f-62025287bdd2","excerpt":"We are following the development of Angular 2.0.0 since the beginning on and are also contributing to the project. Just recently we’ve built a simple zippy…","html":"<p>We are following the development of Angular 2.0.0 since the beginning on and are also contributing to the project. Just recently we’ve built a simple zippy component in Angular and in this article we want to show you how.</p>\n<h2>Getting started with Angular 2.0.0</h2>\n<p>There are several options today to get started with Angular. For instance, we can go to <a href=\"http://angular.io\">angular.io</a> and use the <a href=\"https://angular.io/docs/js/latest/quickstart.html\">quickstart</a> guide. Or, we can install the <a href=\"http://cli.angulario\">Angular CLI</a>, which takes care of scaffolding, building and serving Angular applications. In this article we will use <s><a href=\"http://twitter.com/pkozlowski_os\" title=\"Pawel Kozlowski on Twitter\">Pawel Kozlowski’s</a> <a href=\"https://github.com/pkozlowski-opensource/ng2-play\" title=\"ng2-play on GitHub\">ng2-play repository</a></s> the Angular CLI, but again, you can use whatever suits you.</p>\n<p>We start by installing Angular CLI as a global command on our local machine using npm.</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ npm install -g angular-cli</code></pre></div>\n<p>Once that is done, we can scaffold a new Angular project by running <code class=\"language-text\">ng new &lt;PROJECT_NAME&gt;</code>. Note that the project is scaffolded in the directory where we’re in at this moment.</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ ng new zippy-app</code></pre></div>\n<p>Next, we navigate into the project and run <code class=\"language-text\">ng serve</code>, which will essentially build and serve a hello world app on <code class=\"language-text\">http://localhost:4200</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ cd zippy-app\n$ ng serve</code></pre></div>\n<p>We open a browser tab on <code class=\"language-text\">localhost://4200</code> and what we see is the text “zippy-app works!“. Cool, we’re all set up to build a zippy component in Angular!</p>\n<h2>Building the zippy component</h2>\n<p>Before we start building the zippy component with Angular, we need to clarify what we’re talking about when using the term “zippy”. It turns out that a lot of people think they don’t know what a zippy is, even if they do, just because of the naming.</p>\n<p>Also known as “accordion”. You can click the summary text and the actual content toggles accordingly. If you take a look at this particular plunk, you’ll see that we actually don’t need to do any special implementation to get this working. We have the <code class=\"language-text\">&lt;details&gt;</code> element that does the job for us. But how can we implement such a thing in Angular?</p>\n<p>We start off by adding a new file <code class=\"language-text\">src/app/my-zippy.component.ts</code> and creating a class in ES2015 that we export, so it can be imported by other consumers of this class, by using the ES2015 module system. If you’re not familiar with modules in ES2015 you might want to read our article on <a href=\"/angularjs/es6/2015/01/23/exploring-angular-1.3-using-es6.html\">using ES2015 with Angular today</a>.</p>\n<blockquote>\n<blockquote>\n<p><strong>Special Tip</strong>: We would normaly use Angular CLI to generate a component for us, instead of creating the files manually, but this articles focuses on understanding the building blocks of creating a custom component.</p>\n</blockquote>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ZippyComponent</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The next thing we want to do, is to make our <code class=\"language-text\">ZippyComponent</code> class an actual component and give it a template so that we can see that it is ready to be used. In order to tell Angular that this particular class is a component, we use something called “Decorators”.</p>\n<p>Decorators are a way to add metadata to our existing code. Those decorators are actually not supported by ES2015 but have been developed as language extension of the TypeScript transpiler, which is used in this project. We’re not required to use decorators though. As mentioned, those are just transpiled to ES5 and then simply used by the framework. However, for simplicity sake we’ll use them in this article.</p>\n<p>Angular provides us with a couple of decorators so we can express our code in a much more elegant way. In order to build a component, we need the <code class=\"language-text\">@Component()</code> decorator. Decorators can be imported just like classes or other symbols, by using ES2015 module syntax. If you heard about <strong>annotations in traceur</strong> before and wonder how they relate to decorators, you might want to read our article on <a href=\"http://blog.thoughtram.io/angular/2015/05/03/the-difference-between-annotations-and-decorators.html\">the difference between annotations and decorators</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Component <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@angular/core'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ZippyComponent</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The <code class=\"language-text\">Component</code> decorator adds information about what our component’s element name will be, what  input properties it has and more. We can also add information about the component’s view and template.</p>\n<p>We want our zippy component to be usable as <code class=\"language-text\">&lt;my-zippy&gt;</code> element. So all we need to do, is to add a <code class=\"language-text\">@Component()</code> decorator with that particular information. To specify the element name, or rather CSS selector, we need to add a <code class=\"language-text\">selector</code> property that matches a CSS selector.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import { Component } from &#39;@angular/core&#39;;\n\n@Component({\n  selector: &#39;my-zippy&#39;\n})\nexport class ZippyComponent {\n\n}</code></pre></div>\n<p>Next, our component needs a template. We add information about the component’s view. <code class=\"language-text\">templateUrl</code> tells Angular where to load the component template from. To make <code class=\"language-text\">templateUrl</code> work with relative paths, we add another property <code class=\"language-text\">moduleId</code> with a value <code class=\"language-text\">module.id</code>. To get more information on <code class=\"language-text\">moduleId</code>, make sure to check out our article on <a href=\"/angular/2016/06/08/component-relative-paths-in-angular-2.html\">Component-Relative Paths in Angular</a></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Component <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@angular/core'</span><span class=\"token punctuation\">;</span>\n\n@<span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  moduleId<span class=\"token punctuation\">:</span> module<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>\n  selector<span class=\"token punctuation\">:</span> <span class=\"token string\">'my-zippy'</span><span class=\"token punctuation\">,</span>\n  templateUrl<span class=\"token punctuation\">:</span> <span class=\"token string\">'my-zippy.component.html'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ZippyComponent</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Later at runtime, when Angular compiles this component, it’ll fetch <code class=\"language-text\">my-zippy.component.html</code> asynchronously. Let’s create a file <code class=\"language-text\">src/app/my-zippy.component.html</code> with the following contents:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>zippy<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>zippy__title<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    &amp;blacktriangledown; Details\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>zippy__content<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    This is some content.\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>CSS classes can be ignored for now. They just give us some semantics throughout our template.</p>\n<p>Alright, believe it or not, that’s basically all we need to do to create a component. Let’s use our zippy component inside the application. In order to do that, we need to do things:</p>\n<ul>\n<li>Add our new component to the application module</li>\n<li>Use <code class=\"language-text\">ZippyComponent</code> in <code class=\"language-text\">ZippyAppComponent</code>’s template</li>\n</ul>\n<p>Angular comes with a module system that allows us to register directives, components, service and many other things in a single place, so we can use them throughout our application. If we take a look at the <code class=\"language-text\">src/app/app.module.ts</code> file, we see that Angular CLI already created a module for us.  To register <code class=\"language-text\">ZippyComponent</code> on <code class=\"language-text\">AppModule</code>, we import it and add it to the list <code class=\"language-text\">AppModule</code>’s declarations:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> NgModule <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@angular/core'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> BrowserModule <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@angular/platform-browser'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ZippyAppComponent <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./zippy-app.component'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ZippyComponent <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./my-zippy.component'</span><span class=\"token punctuation\">;</span>\n\n@<span class=\"token function\">NgModule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  imports<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>BrowserModule<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  declarations<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>ZippyAppComponent<span class=\"token punctuation\">,</span> ZippyComponent<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// we're adding ZippyComponent here</span>\n  bootstrap<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>ZippyAppComponent<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppModule</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>We don’t worry too much about the <code class=\"language-text\">imports</code> for now, but we acknowledge that Angular needs <code class=\"language-text\">BrowserModule</code> to make our app run in the browser. The <code class=\"language-text\">declarations</code> property defines all directives and pipes that are used in this module and <code class=\"language-text\">bootstrap</code> tells Angular, which component should be bootstrapped to run the application. <code class=\"language-text\">ZippyAppComponent</code> is our root component and has been generated by Angular CLI as well, <code class=\"language-text\">ZippyComponent</code> is our own custom component that we’ve just created.</p>\n<p>Now, to actually render our zippy component in our application, we need to use it in <code class=\"language-text\">ZippyAppComponent</code>’s template. Let’s do that right away:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Component <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@angular/core'</span><span class=\"token punctuation\">;</span>\n\n@<span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  moduleId<span class=\"token punctuation\">:</span> module<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>\n  selector<span class=\"token punctuation\">:</span> <span class=\"token string\">'zippy-app'</span><span class=\"token punctuation\">,</span>\n  template<span class=\"token punctuation\">:</span> <span class=\"token string\">'&lt;my-zippy>&lt;/my-zippy>'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ZippyAppComponent</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Nice! Running this in the browser gives us at least something that looks like a zippy component. The next step is to bring our component to life.</p>\n<h2>Bringing the component to life</h2>\n<p>In order to bring this component to life, let’s recap quickly what we need:</p>\n<ul>\n<li>Clicking on the zippy title should toggle the content</li>\n<li>The title of the should be configurable from the outside world, currently hard-coded in the template</li>\n<li>DOM that is used inside the <code class=\"language-text\">&lt;my-zippy&gt;</code> element should be projected in the zippy content</li>\n</ul>\n<p>Let’s start with the first one: when clicking on the zippy title, the content should toggle. How do we implement that in Angular?</p>\n<p>We know, in Angular 1.x, we’d probably add an <code class=\"language-text\">ngClick</code> directive to the title and set a scope property to <code class=\"language-text\">true</code> or <code class=\"language-text\">false</code> and toggle the zippy content respectively by using either <code class=\"language-text\">ngHide</code> or <code class=\"language-text\">ngShow</code>. We can do pretty much the same in Angular >= 2.x as well, just that we have a bit different semantics.</p>\n<p>Instead of adding an <code class=\"language-text\">ngClick</code> directive (which we don’t have in Angular 2.x), to call for instance a method <code class=\"language-text\">toggle()</code>, we bind to the <code class=\"language-text\">click</code> event directly using the following template syntax.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">...\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>zippy__title<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">(click)</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>toggle()<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  &amp;blacktriangledown; Details\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n...</code></pre></div>\n<p>If you’re not familiar with this syntax I recommend you either reading this article on <a href=\"http://pascalprecht.github.io/2014/10/25/integrating-web-components-with-angularjs/\">integrating Web Components with Angular</a>, or this article about <a href=\"/angular/2015/08/11/angular-2-template-syntax-demystified-part-1.html\">Angular’s template syntax demystified</a>. <a href=\"https://www.youtube.com/watch?v=-dMBcqwvYA0\">Misko’s keynote</a> from this year’s ng-conf is also a nice resource.</p>\n<p>Now we’re basically listening on a <code class=\"language-text\">click</code> event and execute a <strong>statement</strong>. But where does <code class=\"language-text\">toggle()</code> come from? We can access component methods directly in our template. There’s no <code class=\"language-text\">$scope</code> service or controller that provides those methods. Which means, <code class=\"language-text\">toggle()</code> is just a method defined in <code class=\"language-text\">ZippyComponent</code>.</p>\n<p>Here’s what the implementation of this method could look like:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ZippyComponent</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">toggle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>visible <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>visible<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We simply invert the value of the component’s <code class=\"language-text\">visible</code> property. In order to get a decent default state, we set <code class=\"language-text\">visible</code> to <code class=\"language-text\">true</code> when the component is loaded.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ZippyComponent</span> <span class=\"token punctuation\">{</span>\n\n  visible <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">toggle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>visible <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>visible<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now that we have a property that represents the visibility state of the content, we can use it in our template accordingly. Instead of <code class=\"language-text\">ngHide</code> or <code class=\"language-text\">ngShow</code> (which we also don’t have in Angular >= 2.x), we can simply bind the value of our <code class=\"language-text\">visible</code> property to our zippy content’s <code class=\"language-text\">hidden</code> property, which every DOM element has by default.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">...\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>zippy__content<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">[hidden]</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>!visible<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  This is some content.\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n...</code></pre></div>\n<p>Again, what we see here is part of the new template syntax in Angular. Angular >= 2.x binds to properties rather than attributes in order to work with Web Components, and this is how you do it. We can now click on the zippy title and the content toggles!</p>\n<p>Oh! The little arrow in the title still points down, even if the zippy is closed. We can fix that easily with Angular’s interpolation like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">...\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>zippy__title<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">(click)</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>toggle()<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  {{ visible ? '&amp;blacktriangledown;' : '&amp;blacktriangleright;' }} Details\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n...</code></pre></div>\n<p>Okay, we’re almost there. Let’s make the zippy title configurable. We want that consumers of our component can define how they pass a title to it. Here’s what our consumer will be able to do:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>zippy</span> <span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Details<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>zippy</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>zippy</span> <span class=\"token attr-name\">[title]</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">'</span>Details'<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>zippy</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>zippy</span> <span class=\"token attr-name\">[title]</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>evaluatesToTitle<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>zippy</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>In Angular >= 2.x, we don’t need to specify how scope properties are bound in our component, the consumer does. That means, this gets <strong>a lot</strong> easier in Angular too, because all we need to do is to import the <code class=\"language-text\">@Input()</code> decorator and teach our component about an input property, like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Component<span class=\"token punctuation\">,</span> Input <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@angular/core'</span><span class=\"token punctuation\">;</span>\n\n@<span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  moduleId<span class=\"token punctuation\">:</span> module<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>\n  selector<span class=\"token punctuation\">:</span> <span class=\"token string\">'my-zippy'</span><span class=\"token punctuation\">,</span>\n  templateUrl<span class=\"token punctuation\">:</span> <span class=\"token string\">'my-zippy.component.html'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ZippyComponent</span> <span class=\"token punctuation\">{</span>\n  @<span class=\"token function\">Input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> title<span class=\"token punctuation\">;</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Basically what we’re doing here, is telling Angular that the value of the <code class=\"language-text\">title</code> <strong>attribute</strong> is projected to the <code class=\"language-text\">title</code> <strong>property</strong>. Input data that flows into the component. If we want to map the <code class=\"language-text\">title</code> property to a different attribute name, we can do so by passing the attribute name to <code class=\"language-text\">@Input()</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">@<span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  moduleId<span class=\"token punctuation\">:</span> module<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>\n  selector<span class=\"token punctuation\">:</span> <span class=\"token string\">'my-zippy'</span><span class=\"token punctuation\">,</span>\n  templateUrl<span class=\"token punctuation\">:</span> <span class=\"token string\">'my-zippy.component.html'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ZippyComponent</span> <span class=\"token punctuation\">{</span>\n  @<span class=\"token function\">Input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'zippyTitle'</span><span class=\"token punctuation\">)</span> title<span class=\"token punctuation\">;</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>But for simplicity’s sake, we stick with the shorthand syntax. There’s nothing more to do to make the title configurable, let’s update the template for <code class=\"language-text\">ZippyAppComponent</code> app.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">@<span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  moduleId<span class=\"token punctuation\">:</span> module<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>\n  selector<span class=\"token punctuation\">:</span> <span class=\"token string\">'zippy-app'</span><span class=\"token punctuation\">,</span>\n  template<span class=\"token punctuation\">:</span> <span class=\"token string\">'&lt;my-zippy title=\"Details\">&lt;/zippy>'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">...</span></code></pre></div>\n<p>Now we need to change the template of zippy to make title to appear at correct place, let’s udpate the template for zippy title.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">...\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>zippy__title<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">(click)</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>toggle()<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  {{ visible ? '&amp;blacktriangledown;' : '&amp;blacktriangleright;' }} {{title}}\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n...</code></pre></div>\n<h2>Insertion Points instead of Transclusion</h2>\n<p>Our component’s title is configurable. But what we really want to enable, is that a consumer can decide what goes <strong>into</strong> the component and what not, right?</p>\n<p>We could for example use our component like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>my-zippy</span> <span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Details<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>Here's some detailed content.<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>my-zippy</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>In order to make this work, we’ve used transclusion in Angular 1. We don’t need transclusion anymore, since Angular 2.x makes use of Shadow DOM (Emulation) which is part of the Web Components specification. Shadow DOM comes with something called “Content Insertion Points” or “Content Projection”, which lets us specify, where DOM from the outside world is projected in the Shadow DOM or view of the component.</p>\n<p>I know, it’s hard to believe, but all we need to do is adding a <code class=\"language-text\">&lt;ng-content&gt;</code> tag to our component template.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">...\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>zippy__content<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">[hidden]</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>!visible<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ng-content</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ng-content</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n...</code></pre></div>\n<p>Angular uses Shadow DOM (Emulation) since 2.x by default, so we can just take advantage of that technology. <s>It turns out that insertion points in Shadow DOM are even more powerful than transclusion in Angular.</s> Angular 1.5 introduces <a href=\"/angular/2015/11/16/multiple-transclusion-and-named-slots.html\">multiple transclusion slots</a>, so we can explicitly “pick” which DOM is going to be projected into our directive’s template. The <code class=\"language-text\">&lt;ng-content&gt;</code> tag lets us define <strong>which</strong> DOM elements are projected too. If you want to learn more about Shadow DOM, I recommend the articles on <a href=\"http://www.html5rocks.com/en/tutorials/webcomponents/shadowdom/\">html5rocks.com</a> or watch <a href=\"https://www.youtube.com/watch?v=gSTNTXtQwaY\">this talk</a> from ng-europe.</p>\n<h2>Putting it all together</h2>\n<p>Yay, this is how we build a zippy component in Angular. Just to make sure we’re on the same page, here’s the complete zippy component code we’ve written throughout this article:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Component<span class=\"token punctuation\">,</span> Input <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@angular/core'</span><span class=\"token punctuation\">;</span>\n\n@<span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  moduleId<span class=\"token punctuation\">:</span> module<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>\n  selector<span class=\"token punctuation\">:</span> <span class=\"token string\">'my-zippy'</span><span class=\"token punctuation\">,</span>\n  templateUrl<span class=\"token punctuation\">:</span> <span class=\"token string\">'my-zippy.component.html'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ZippyComponent</span> <span class=\"token punctuation\">{</span>\n\n  @<span class=\"token function\">Input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> title<span class=\"token punctuation\">;</span>\n  visible <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">toggle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>visible <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>visible<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And here’s the template:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>zippy<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">(click)</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>toggle()<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>zippy__title<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    {{ visible ? '&amp;blacktriangledown;' : '&amp;blacktriangleright;' }} {{title}}\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">[hidden]</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>!visible<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>zippy__content<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ng-content</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ng-content</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>I’ve set up a repository so you can play with the code <a href=\"https://github.com/thoughtram/angular-zippy\">here</a>. In fact, I’ve also added this component to the Angular project. The pull request is <s>pending</s> merged <a href=\"https://github.com/angular/angular/pull/729\">here</a> <s>and likely to be merged the next few days</s>. At this point I’d like to say thank you to <a href=\"http://twitter.com/vberchet\">Victor</a> and <a href=\"http://twitter.com/mhevery\">Misko</a> for helping me out on getting this implemented.</p>\n<p>You might notice that it also comes with e2e tests. The component itself even emits it’s own events using <code class=\"language-text\">EventEmitter</code>, which we haven’t covered in this article. Check out the demos to see event emitters in action!</p>","frontmatter":{"author":"pascal_precht","title":"Developing a zippy component in Angular","imageUrl":null,"date":"27 March 2015","summary":"Just recently we've built a simple zippy component in Angular 2.0.0 and in this article we want to show how. Read on to build your first component.","categories":["angular"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/angular/2015/03/27/building-a-zippy-component-in-angular-2.html","previous":{"fields":{"slug":"/angular/2015/03/21/angular-and-i18n-the-new-world.html"},"frontmatter":{"date":"2015/03/21","title":"Angular and i18n - The new world","categories":["angular"]}},"next":{"fields":{"slug":"/angular/2015/04/09/developing-a-tabs-component-in-angular-2.html"},"frontmatter":{"date":"2015/04/09","title":"Developing a tabs component in Angular","categories":["angular"]}}}}}