{"componentChunkName":"component---src-templates-blog-post-js","path":"/angular/2015/08/20/host-and-visibility-in-angular-2-dependency-injection.html","webpackCompilationHash":"0c5d630095500f933ccd","result":{"data":{"site":{"siteMetadata":{"title":"Articles by thoughtram","authors":[{"id":"pascal_precht","name":"Pascal Precht","twitter":"PascalPrecht","img":"https://avatars2.githubusercontent.com/u/445106?s=460&v=4"},{"id":"christoph_burgdorf","name":"Christoph Burgdorf","twitter":"cburgdorf","img":"https://avatars0.githubusercontent.com/u/521109?s=460&v=4"},{"id":"dominic_elm","name":"Dominic Elm","twitter":"d3lm","img":"https://avatars0.githubusercontent.com/u/12571019?s=400&v=4"},{"id":"thomas_burleson","name":"Thomas Burleson","twitter":"thomasburleson","img":"https://avatars3.githubusercontent.com/u/210413?s=400&v=4"},{"id":"elvira_eulitz","name":"Elvira Eulitz","twitter":"ElviraEulitz","img":"https://avatars3.githubusercontent.com/u/29247040?s=400&v=4"},{"id":"maxim_koretskyi","name":"Maxim Koretskyi","twitter":"maxim_koretskyi","img":"https://avatars3.githubusercontent.com/u/6124091?s=400&v=4"}]}},"markdownRemark":{"id":"2e8531f9-fdb1-559a-8885-2322cb29d5f1","excerpt":"In our article on Dependency Injection in Angular we explored what dependency injection actually is, and how it is implemented in the Angular framework. If you…","html":"<p>In our article on <a href=\"/angular/2015/05/18/dependency-injection-in-angular-2.html\">Dependency Injection in Angular</a> we explored what dependency injection actually is, and how it is implemented in the Angular framework. If you haven’t read that article yet, I highly recommend you doing so, since this article is based on it.</p>\n<p>Even though we learned that Angular’s new dependency injection is very flexible and solves pretty much all the problems we have with the dependency injection in AngularJS, there are still a couple of topics that we haven’t discussed yet. One of them is how Angular treats the relationship between <strong>host</strong> and child injectors, and the other one is how the <strong>visibility of dependencies</strong> are handled. In this article we’re going to explore exactly these two topics.</p>\n<h2>Understanding host relationships</h2>\n<p>Host and visibility are both features in Angular’s dependency injection system, that are very specific to Angular and throughout this article we’ll learn why. For now just keep in mind that we probably don’t need any of these features when using Angular’s DI not in the context of Angular itself. However, once we understood the context and why this feature exist, we’ll also take a look at how this is implemented under the hood, so we all know what’s going on.</p>\n<p>Let’s start off by imagining the following scenario. We have three nested components that all do their own thing (because that’s what components do in Angular):</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>component-one</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>component-two</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>component-three</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>component-three</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>component-two</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>component-one</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>As we learned in our article on dependency injection in Angular, each component in Angular creates its own injector. Which means the code above can be translated to something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">injector (&lt;component-one&gt;)\n      ^\n      |\nchild injector (&lt;component-two&gt;)\n      ^\n      |\ngrand child injector (&lt;component-three&gt;)</code></pre></div>\n<p>The <code class=\"language-text\">^</code> symbol just signalises that a child injector is created from it’s parent. To come back to our nice and cozy JavaScript world, we could also translate it to this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> injector <span class=\"token operator\">=</span> Injector<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> childInjector <span class=\"token operator\">=</span> Injector<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> injector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> grandChildInjector <span class=\"token operator\">=</span> Injector<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> childInjector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Of course, this code is very simplified and as we can see, there are also no providers passed to any of the injectors. Usually, when injectors are created, there are providers passed to them so we can ask for specific dependencies in our code. Let’s add some actual providers, to see how the relationships between the injectors affect dependency instantiation.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> injector <span class=\"token operator\">=</span> Injector<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> provide<span class=\"token punctuation\">:</span> Car<span class=\"token punctuation\">,</span> deps<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>Engine<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> provide<span class=\"token punctuation\">:</span> Engine<span class=\"token punctuation\">,</span> deps<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> childInjector <span class=\"token operator\">=</span> Injector<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> injector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> grandChildInjector <span class=\"token operator\">=</span> Injector<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> provide<span class=\"token punctuation\">:</span> Car<span class=\"token punctuation\">,</span> useClass<span class=\"token punctuation\">:</span> Convertible<span class=\"token punctuation\">,</span> deps<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> childInjector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The injector tree allows us to define injector providers for a specific component and its children. With the code above, if we ask <code class=\"language-text\">grandChild</code> for a dependency of type <code class=\"language-text\">Car</code> we’ll get back an instance of type <code class=\"language-text\">Convertible</code>, because it defines it’s own provider for that type. However, if we ask for a dependency of type <code class=\"language-text\">Engine</code>, we simply get an instance of the class <code class=\"language-text\">Engine</code>, because <code class=\"language-text\">grandChild</code> will ask it’s parent injector (recursively) until an injector has providers defined for that type. If this is entirely new to you, all this has been covered in our last <a href=\"/angular/2015/05/18/dependency-injection-in-angular-2.html\">article</a> on DI.</p>\n<p>Okay, this sounds all very powerful but where does this host thing come into play? Let’s get back to the original code with our three nested components. <code class=\"language-text\">&lt;component-two&gt;</code> and <code class=\"language-text\">&lt;component-three&gt;</code> are both children of <code class=\"language-text\">&lt;component-one&gt;</code>. However, we don’t know yet what’s inside of our components themselves. In Angular, a component always has a view. A component’s view can be in a way <a href=\"/angular/2015/06/29/shadow-dom-strategies-in-angular2.html\">encapsulated</a>, this is due to the fact that, since 2.x, Angular supports Shadow DOM.</p>\n<p>For example, here’s what the view of <code class=\"language-text\">&lt;component-one&gt;</code> could look like:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>Component 1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ng-content</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ng-content</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>As we can see, the view of a component is just yet another DOM tree. If we configure Angular accordingly, this DOM tree can be Shadow DOM. That’s also why we have an <code class=\"language-text\">&lt;ng-content&gt;</code> tag there. It’s Angular’s implementation of <strong>content insertion points</strong>, which is another Shadow DOM feature.</p>\n<p>Even though we don’t use Shadow DOM, a component still comes with it’s own view that is kind of hidden behind the component itself. This is what makes every component in Angular a <strong>host</strong> of a view. In fact, when speaking just about Shadow DOM, we always need a host element to create a shadow dom for it.</p>\n<p><strong>Okay, but how is that related to DI?</strong></p>\n<p>That’s a good question! We’ve now seen a couple of times that an injector is always looking up a dependency on it’s parent injector in case it doesn’t have providers for the requested type. That parent injector does pretty much the same until we finally get our dependency. When we think in components, that means that a component’s injector will lookup up a dependency even across boundaries.</p>\n<p>To make things a bit more clear, let’s say we have a component <code class=\"language-text\">&lt;video-player&gt;</code> which comes with the following view.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>video-screen</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>video-screen</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>video-controls</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>play-button</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>play-button</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>pause-button</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>pause-button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>video-controls</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Our <code class=\"language-text\">&lt;video-player&gt;</code> component consists of a couple of other components. Let’s say that the injector of <code class=\"language-text\">&lt;video-player&gt;</code> comes with providers for a <code class=\"language-text\">PlayerService</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">@<span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  selector<span class=\"token punctuation\">:</span> <span class=\"token string\">'video-player'</span><span class=\"token punctuation\">,</span>\n  providers<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    PlayerService <span class=\"token comment\">// shorthand for { provide: PlayerService, deps: [] }</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">VideoPlayer</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">PlayerService</code> is used by the component’s view components (<code class=\"language-text\">&lt;play-button&gt;</code>, <code class=\"language-text\">&lt;pause-button&gt;</code>), to play and pause a video respectively. In order to get an instance of <code class=\"language-text\">PlayerService</code>, we’d need to inject it like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">@<span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PlayButton</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">playerService<span class=\"token punctuation\">:</span> PlayerService</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Since we have a provider for <code class=\"language-text\">PlayerService</code> defined in <code class=\"language-text\">VideoPlayer</code>, its injector will return an instance accordingly and everything works as expected, even if <code class=\"language-text\">&lt;play-button&gt;</code> doesn’t know anything about that provider. However, in case <code class=\"language-text\">VideoPlayer</code> wouldn’t define that provider, the lookup will go on and on (even outside the <code class=\"language-text\">&lt;video-player&gt;</code> component) until either some other component has such a provider, or an error is thrown.</p>\n<p>This can be problematic. Just imagine someone uses our code with another <code class=\"language-text\">&lt;awesome-player&gt;</code> component instead, and it doesn’t have that provider. Our code could end up getting an instance of <code class=\"language-text\">PlayerService</code> that it actually shouldn’t get. What we need is a way to somehow make sure, that we always get an instance of <code class=\"language-text\">PlayerService</code> provided by the host video component (wether it’s <code class=\"language-text\">&lt;video-player&gt;</code>, <code class=\"language-text\">&lt;awesome-player&gt;</code> or anything else).</p>\n<h2>Restricting dependency lookup</h2>\n<p>Luckily, this is covered by Angular’s dependency injection system. If we need to ask for a dependency and want to make sure that the lookup ends with the current component’s host, we can use the <code class=\"language-text\">@Host</code> decorator. Here’s our <code class=\"language-text\">&lt;play-button&gt;</code> component rewritten with the lookup constraint:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">@<span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PlayButton</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">@<span class=\"token function\">Host</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> playerService<span class=\"token punctuation\">:</span> PlayerService</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If you don’t know what it’s about with these decorators, you might want to read our article on <a href=\"/angular/2015/05/03/the-difference-between-annotations-and-decorators.html\">annotations and decorators</a>. Now we ensured that <code class=\"language-text\">PlayerService</code> instance is always instatiated by our component’s host, which is currently our <code class=\"language-text\">VideoPlayer</code> component.</p>\n<h2>Dependency Visibility</h2>\n<p>Okay cool, we now know what <code class=\"language-text\">@Host</code> is and why we need it. But we didn’t talk about the other thing that Angular’s DI introduces yet - dependency visibility. So what is this visibility we’re talking about here? Well, as we learned, we can use the <code class=\"language-text\">providers</code> property in a <code class=\"language-text\">@Component</code> decorator to define providers for its injector. However, it turns out that there’s another property <code class=\"language-text\">viewProviders</code> that basically allows us to do the same thing. What’s the difference between those two then?</p>\n<p><code class=\"language-text\">viewProviders</code> allows us to define injector providers that are only available for a component’s view. Let’s take a closer look at what that means by using our <code class=\"language-text\">&lt;video-player&gt;</code> component. Our <code class=\"language-text\">&lt;video-player&gt;</code> component has its own view with its own components. So usually, we would use that component just like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>video-player</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>video-player</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>But let’s imagine, we change the API and <code class=\"language-text\">&lt;video-player&gt;</code> expects a child element, that implements a video component (whatever that looks like). So we go ahead an build a <code class=\"language-text\">&lt;custom-video&gt;</code> component that does exactly that and we use it as a child of <code class=\"language-text\">&lt;video-player&gt;</code> so it can do it’s job with it:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>video-player</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>custom-video</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>custom-video</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>video-player</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Now <code class=\"language-text\">&lt;video-player&gt;</code> has a child element (with it’s own injector) that it needs to work. Note that this child is part of the Light DOM rather than the video player component’s Shadow DOM (emulation). Next, we realise that <code class=\"language-text\">&lt;custom-video&gt;</code> needs something of type <code class=\"language-text\">VideoService</code> in order to work correctly, so we inject it accordingly:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">@<span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomVideo</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">videoService<span class=\"token punctuation\">:</span> VideoService</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We know that, if <code class=\"language-text\">&lt;custom-video&gt;</code> ask its injector for a dependency, the injector will look up the dependency in it’s injector tree if it doesn’t have a provider for that type, until it gets the requested instance. This is quite cool, but now imagine that <code class=\"language-text\">&lt;video-player&gt;</code> has its own provider for the type <code class=\"language-text\">VideoService</code>, because it needs a very specific instance for it’s view, in order to work:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">@<span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  selector<span class=\"token punctuation\">:</span> <span class=\"token string\">'video-player'</span><span class=\"token punctuation\">,</span>\n  providers<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    PlayerService<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> provide <span class=\"token punctuation\">:</span> VideoService<span class=\"token punctuation\">,</span> useClass <span class=\"token punctuation\">:</span> SpecificVideoService<span class=\"token punctuation\">,</span> deps<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">VideoPlayer</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>What now happens is, that <code class=\"language-text\">&lt;custom-video&gt;</code> would get an instance of <code class=\"language-text\">SpecificVideoService</code> but it actually needs an instance of <code class=\"language-text\">VideoService</code>. However, due to the lookup that happens in the injector tree, the provider defined in <code class=\"language-text\">&lt;video-player&gt;</code> is the next one that is available. How can we get around that? This is exactly where <code class=\"language-text\">viewProviders</code> come in. With <code class=\"language-text\">viewProviders</code> we can tell the DI system very specifically, which providers are available to which child injectors (Light DOM or Shadow DOM).</p>\n<p>To make our code work as expected, all we have to do is to make the <code class=\"language-text\">VideoService</code> provider of <code class=\"language-text\">&lt;video-player&gt;</code> explicitly available only for its view:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">@<span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  selector<span class=\"token punctuation\">:</span> <span class=\"token string\">'video-player'</span><span class=\"token punctuation\">,</span>\n  providers<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    PlayerService\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  viewProviders<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span> provide<span class=\"token punctuation\">:</span> VideoService<span class=\"token punctuation\">,</span> useClass<span class=\"token punctuation\">:</span> SpecificVideoService<span class=\"token punctuation\">,</span> deps<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">VideoPlayer</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now, whenever a component of <code class=\"language-text\">&lt;video-player&gt;</code>’s view asks for something of type <code class=\"language-text\">VideoService</code>, it’ll get an instance of <code class=\"language-text\">SpecificVideoService</code> as expected. Other child components from the outside world that ask for the same type however, won’t see this provider and will continue with the lookup in the injector tree. Which means <code class=\"language-text\">&lt;custom-video&gt;</code> now gets an expected instance from another parent injector without even knowing that <code class=\"language-text\">&lt;video-player&gt;</code> actually introduces its own provider.</p>\n<p><strong>View Providers are also only available in components</strong>, not in directives. That’s simply because a directive doesn’t have its own view.</p>\n<h2>Conclusion</h2>\n<p>Angular’s DI is very powerful and doesn’t only cover the common needs when it comes to a decent dependency injection system. It even implements specific use cases for injector trees that are used in conjunction with DOM trees, which could also be encapsulated. I hope this article made clear why we have <code class=\"language-text\">providers</code>, <code class=\"language-text\">viewProviders</code> and <code class=\"language-text\">@Host</code>.</p>","frontmatter":{"author":"pascal_precht","title":"Host and Visibility in Angular's Dependency Injection","imageUrl":null,"date":"20 August 2015","summary":"Angular's DI allows us to configure the visbility of what gets injected from where. Learn about @Host in this article!","categories":["angular"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/angular/2015/08/20/host-and-visibility-in-angular-2-dependency-injection.html","previous":{"fields":{"slug":"/angular/2015/08/11/angular-2-template-syntax-demystified-part-1.html"},"frontmatter":{"date":"2015/08/11","title":"Angular Template Syntax Demystified - Part 1","categories":["angular"]}},"next":{"fields":{"slug":"/announcements/2015/08/31/going-full-time.html"},"frontmatter":{"date":"2015/08/31","title":"Going full-time","categories":["announcements"]}}}}}