{"componentChunkName":"component---src-templates-blog-post-js","path":"/angular/2015/04/09/developing-a-tabs-component-in-angular-2.html","webpackCompilationHash":"0c5d630095500f933ccd","result":{"data":{"site":{"siteMetadata":{"title":"Articles by thoughtram","authors":[{"id":"pascal_precht","name":"Pascal Precht","twitter":"PascalPrecht","img":"https://avatars2.githubusercontent.com/u/445106?s=460&v=4"},{"id":"christoph_burgdorf","name":"Christoph Burgdorf","twitter":"cburgdorf","img":"https://avatars0.githubusercontent.com/u/521109?s=460&v=4"},{"id":"dominic_elm","name":"Dominic Elm","twitter":"d3lm","img":"https://avatars0.githubusercontent.com/u/12571019?s=400&v=4"},{"id":"thomas_burleson","name":"Thomas Burleson","twitter":"thomasburleson","img":"https://avatars3.githubusercontent.com/u/210413?s=400&v=4"},{"id":"elvira_eulitz","name":"Elvira Eulitz","twitter":"ElviraEulitz","img":"https://avatars3.githubusercontent.com/u/29247040?s=400&v=4"},{"id":"maxim_koretskyi","name":"Maxim Koretskyi","twitter":"maxim_koretskyi","img":"https://avatars3.githubusercontent.com/u/6124091?s=400&v=4"}]}},"markdownRemark":{"id":"e435501e-ab30-5e20-8df9-2078a8e6487f","excerpt":"Just recently, we wrote about how to build a zippy component in Angular. We explored how to get started with the framework and learned about some concepts that…","html":"<p>Just recently, we wrote about how to <a href=\"/angular/2015/03/27/building-a-zippy-component-in-angular-2.html\">build a zippy component</a> in Angular. We explored how to get started with the framework and learned about some concepts that it comes with to build a very simple component. If you haven’t read the article, you might want to check it out.</p>\n<p>As a follow up, we now want to build yet another component that is widely used in a lot of applications: Tabs. Building tabs has always been the de facto example when it comes to explaining directive controllers in Angular. Angular >= 2.x does not have the concept of directive controllers, because the component itself is the execution context. It also makes it much easier to access other directives and components through dependency injection. However, you <strong>do</strong> want to <a href=\"/angularjs/2015/01/02/exploring-angular-1.3-bindToController.html\">use directive controllers</a> in Angular 1.x in order to make the migration process to Angular >= 2.x easier.</p>\n<p>Let’s start right away and learn how easy it is to build a tabs component in Angular without the confusing relationship between directive link functions and controllers. We’ll skip the installation part, since that was explored in the other article.</p>\n<h2>What it should look like</h2>\n<p>Before we start implementing the actual component, let’s first clarify what we want to achieve from a consumer point of view. Building tabs with web technologies usually ends up with having a HTML list, that represents the tabs, and container elements per each tab that display the content of a tab.</p>\n<p>Of course, in Angular, those implementation details are hidden behind some nice readable and declarative elements that we all know as directives. Having a tool like Angular (and also Web Components) allows us to create custom elements, so that a consumer could use something like the following snippet to add tabs to an application:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tabs</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tab</span> <span class=\"token attr-name\">tabTitle</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Tab 1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    Here's some content.\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tab</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tab</span> <span class=\"token attr-name\">tabTitle</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Tab 2<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    And here's more in another tab.\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tab</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tabs</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>We have a <code class=\"language-text\">&lt;tab&gt;</code> element that simply represents a single tab which has a title, and we have a <code class=\"language-text\">&lt;tabs&gt;</code> element that takes care of making those <code class=\"language-text\">&lt;tab&gt;</code> elements actually “tabbable”.</p>\n<p>If you’ve been following the development and concepts of Angular, you probably learned that, since Angular 2.x, the <strong>consumer</strong> of a component is in charge of deciding how a value is passed to a component. Whereas in Angular 1.x, the directive defines how a value is bound to it’s scope, so the consumer needs to know about the inner workings of a directive.</p>\n<p>This means, talking about the <code class=\"language-text\">tabTitle</code> attribute that we have in the code above, consumers can either write to the component attribute (if it exists), or to the component property. The latter would allow the consumer to pass expressions to the component that first get evaluated. Here’s what it could look like:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tab</span> <span class=\"token attr-name\">tabTitle</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>This is just a String<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  ...\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tab</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tab</span> <span class=\"token attr-name\">[tabTitle]</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>thisIsAnExpression<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  ...\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tab</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Alright, now that we know what we want to build, let’s get our hands dirty with some Angular code.</p>\n<h2>Building the components</h2>\n<p>We start off by implementing a rather static version of the <code class=\"language-text\">&lt;tabs&gt;</code> element. If you’ve read our article on <a href=\"/angular/2015/03/27/building-a-zippy-component-in-angular-2.html\">building a zippy component in Angular</a>,\nyou know that we need the <code class=\"language-text\">@Component()</code> decorator to tell Angular what the selector and template for our component should be.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">@<span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  selector<span class=\"token punctuation\">:</span> <span class=\"token string\">'tabs'</span><span class=\"token punctuation\">,</span>\n  template<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n    &lt;ul>\n      &lt;li>Tab 1&lt;/li>\n      &lt;li>Tab 2&lt;/li>\n    &lt;/ul>\n  </span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Tabs</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>When using the <code class=\"language-text\">Component</code> decorator, we can specify the template using the <code class=\"language-text\">template</code> property. The back tick syntax comes with ES2015 and allows us to do multi-line string definition without using concatenation operators like <code class=\"language-text\">+</code>.</p>\n<p>As you can see, the component template already comes with a static list of tabs. This list will be replaced with a dynamic directive later, for now we keep it like this so we get a better picture of the direction we’re going. We also need a place where the tab contents will go. Let’s add an insertion point to our template. This will project the outer light DOM into the Shadow DOM (Emulation).</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">@<span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  selector<span class=\"token punctuation\">:</span> <span class=\"token string\">'tabs'</span><span class=\"token punctuation\">,</span>\n  template<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n    &lt;ul>\n      &lt;li>Tab 1&lt;/li>\n      &lt;li>Tab 2&lt;/li>\n    &lt;/ul>\n    &lt;ng-content>&lt;/ng-content>\n  </span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Cool, we can already start using our <code class=\"language-text\">&lt;tabs&gt;</code> component and write HTML into it like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tabs</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>Some random HTML with some random content<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tabs</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Of course, we do want to use <code class=\"language-text\">&lt;tab&gt;</code> elements inside our <code class=\"language-text\">&lt;tabs&gt;</code> component, so let’s build that one. It turns out that the <code class=\"language-text\">&lt;tab&gt;</code> element is actually quite primitive. It’s basically just a container element that has an insertion point to project light DOM. We shouldn’t forget the configurable <code class=\"language-text\">tabTitle</code>. Here’s how we do it.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">@<span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  selector<span class=\"token punctuation\">:</span> <span class=\"token string\">'tab'</span><span class=\"token punctuation\">,</span>\n  template<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n    &lt;div>\n      &lt;ng-content>&lt;/ng-content>\n    &lt;/div>\n  </span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Tab</span> <span class=\"token punctuation\">{</span>\n  @<span class=\"token function\">Input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> tabTitle<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The element should be named <code class=\"language-text\">&lt;tab&gt;</code> so we set the <code class=\"language-text\">selector</code> property accordingly. We bind the <code class=\"language-text\">tabTitle</code> <strong>input</strong> to the component’s <code class=\"language-text\">tabTitle</code> <strong>property</strong>. Last but not least we add a template that is just a div with an insertion point.</p>\n<p>Wait, that’s it? Well, sort of. There’s a tiny bit more we need to do, but let’s just use our new <code class=\"language-text\">&lt;tab&gt;</code> component in our <code class=\"language-text\">&lt;tabs&gt;</code> component.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tabs</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tab</span> <span class=\"token attr-name\">tabTitle</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Foo<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    Content of tab Foo\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tab</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tab</span> <span class=\"token attr-name\">tabTitle</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Bar<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    Content of tab Bar\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tab</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tabs</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Executing this in the browser, we notice that we still get a list with <code class=\"language-text\">Tab 1</code> and <code class=\"language-text\">Tab 2</code> and in addition, we see the projected contents of both tabs at the same time. That’s not quite a tabs component, right?</p>\n<h2>Making the components dynamic</h2>\n<p>We’re getting there. Let’s first make our <code class=\"language-text\">&lt;tabs&gt;</code> component to actually use the correct titles instead of a hard-coded list. In order to generate a dynamic list, we need a collection. We can use our component’s constructor to initialize a collection that holds all tabs like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Tabs</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">// typescript needs to know what properties will exist on class instances</span>\n  tabs<span class=\"token punctuation\">:</span> Tab<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Okay cool, but how do we get our tab titles into that collection? This is where, in Angular 1, directive controllers come in. However, since Angular 2.x it’s much easier. First we need an interface so that the outside world can actually add items to our internal collection. Let’s add a method <code class=\"language-text\">addTab(tab: Tab)</code>, that takes a <code class=\"language-text\">Tab</code> object and does exactly what we need.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Tabs</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n  <span class=\"token function\">addTab</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tab<span class=\"token punctuation\">:</span>Tab</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tabs<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>tab<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The method just simply pushes the given object into our collection and we’re good. Next we update the template so that the list is generated dynamically based on our collection. In Angular 1 we have a <code class=\"language-text\">ngRepeat</code> directive that lets us iterate over a collection to repeat DOM. Since Angular 2.x there a a <code class=\"language-text\">ngFor</code> directive that pretty much solves the exact same problem. We use the directive to iterate over our tabs collection to generate a dynamic list of tab titles in the component’s template.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">@<span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n  template<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n    &lt;ul>\n      &lt;li *ngFor=\"let tab of tabs\">{{ tab.tabTitle }}&lt;/li>\n    &lt;/ul>\n  </span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>If the templating syntax doesn’t make sense to you at all, you might want to check out <a href=\"https://docs.google.com/document/d/1HHy_zPLGqJj0bHMiWPzPCxn1pO5GlOYwmv-qGgl4f_s/edit\">this design doc</a>.</p>\n<p>Alright, we have a collection, we have an API to extend the collection and we have a list in our template that is generated dynamically based on that collection. Since the collection is empty by default, the generated list is empty and no tab title is shown. Somebody needs to call this <code class=\"language-text\">addTab()</code> method!</p>\n<p>That’s where the <code class=\"language-text\">&lt;tab&gt;</code> component comes into play (again). Inside the component we can simply ask for a <strong>parent</strong> <code class=\"language-text\">Tabs</code> dependency by using the new, much more powerful dependency injection system and get an instance of it. This allows us to simply use given APIs inside a child component. Let’s take a look at what that looks like.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Tab</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tabs<span class=\"token punctuation\">:</span> Tabs</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    tabs<span class=\"token punctuation\">.</span><span class=\"token function\">addTab</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Wait, what happens here? <code class=\"language-text\">tabs: Tabs</code> is just Typescript type annotation which Angular uses for Dependency Injection.\nPlease check out our article where we go deeper inside <a href=\"/angular/2015/05/18/dependency-injection-in-angular-2\">Angular DI</a></p>\n<p><strong>tl;dr</strong></p>\n<blockquote>\n<p>Angular Hierarchical Injector knows, that we want first <code class=\"language-text\">Tabs</code> instance that it can get,\nwhen traversing upwards from current host. In our case the actual host is our  <code class=\"language-text\">&lt;tab&gt;</code> component.\nInjector ask on tab for Tabs, if there is none, Injector will ask Parent Injector for <code class=\"language-text\">Tabs</code>. In our case parent Injector is on <code class=\"language-text\">&lt;tabs&gt;</code> component\nand it has indeed <code class=\"language-text\">Tabs</code> instance, so it will return the correct instance of <code class=\"language-text\">Tabs</code>.</p>\n</blockquote>\n<p>For now it’s just important to understand that this particular type annotation gives you access to a <strong>parent</strong> component dependency, which in our case is <code class=\"language-text\">&lt;tabs&gt;</code>.\nUsing that instance, we can simply call the <code class=\"language-text\">addTab()</code> method with a <code class=\"language-text\">Tab</code> object and we are good to go.</p>\n<h2>Making it tabbable</h2>\n<p>Using the components as they are right now, we <strong>do</strong> get a tabs list generated by our tab titles, but we still see all the contents of each tab at the same time. What we want, is to make that component actually “tabbable”, so that only one tab content is shown. How do we achieve that?</p>\n<p>Well, first we need a property that activates or deactivates a tab and depending on that value, we either show or hide it. We can simply extend our <code class=\"language-text\">&lt;tab&gt;</code> template accordingly like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">@<span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  template<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n    &lt;div [hidden]=\"!active\">\n      &lt;ng-content>&lt;/ng-content>\n    &lt;/div>\n  </span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Tab</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>If a tab is not active, we simply hide it. We haven’t specified this property anywhere, which means it’s <code class=\"language-text\">undefined</code> which evaluates to <code class=\"language-text\">false</code> in that condition. So every tab is deactivated by default. In order to have at least one tab active, we can extend the <code class=\"language-text\">addTab()</code> method accordingly. The following code for instance, activates the very first tab that is added to the collection.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Tabs</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n  <span class=\"token function\">addTab</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tab<span class=\"token punctuation\">:</span>Tab</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tabs<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      tab<span class=\"token punctuation\">.</span>active <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tabs<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>tab<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Awesome! The only thing that is missing, is to activate other tabs when a user clicks on a tab. In order to make this possible, we just need a function that sets the <code class=\"language-text\">activate</code> property when a tab is clicked. Here’s what such a function could look like.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Tabs</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n  <span class=\"token function\">selectTab</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tab<span class=\"token punctuation\">:</span>Tab</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tabs<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tab</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      tab<span class=\"token punctuation\">.</span>active <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    tab<span class=\"token punctuation\">.</span>active <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">js\n\nWe simply iterate over all tabs we have, deactivate them, and activate the one that is passed to that function. Then we just add this function to the template, so it is executed whenever a user clicks a tab, like this.\n\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>js\n@<span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n  template<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n    &lt;ul>\n      &lt;li *ngFor=\"let tab of tabs\" (click)=\"selectTab(tab)\">\n        {{tab.tabTitle}}\n      &lt;/li>\n    &lt;/ul>\n  </span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Again, if this template syntax is new to you, check out the mentioned design document. What happens here is, whenever a <code class=\"language-text\">click</code> event is fired <code class=\"language-text\">selectTab()</code> is executed with the iterator tab instance. Try it out!</p>\n<p>Here’s the complete source in case you ran into any problems.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">@<span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  selector<span class=\"token punctuation\">:</span> <span class=\"token string\">'tabs'</span><span class=\"token punctuation\">,</span>\n  template<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n    &lt;ul>\n      &lt;li *ngFor=\"let tab of tabs\" (click)=\"selectTab(tab)\">\n        {{tab.tabTitle}}\n      &lt;/li>\n    &lt;/ul>\n    &lt;ng-content>&lt;/ng-content>\n  </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Tabs</span> <span class=\"token punctuation\">{</span>\n  tabs<span class=\"token punctuation\">:</span> Tab<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">selectTab</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tab<span class=\"token punctuation\">:</span> Tab</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tabs<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tab</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      tab<span class=\"token punctuation\">.</span>active <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    tab<span class=\"token punctuation\">.</span>active <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">addTab</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tab<span class=\"token punctuation\">:</span> Tab</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tabs<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      tab<span class=\"token punctuation\">.</span>active <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tabs<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>tab<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n@<span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  selector<span class=\"token punctuation\">:</span> <span class=\"token string\">'tab'</span><span class=\"token punctuation\">,</span>\n  template<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n    &lt;div [hidden]=\"!active\">\n      &lt;ng-content>&lt;/ng-content>\n    &lt;/div>\n  </span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Tab</span> <span class=\"token punctuation\">{</span>\n\n  @<span class=\"token function\">Input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> tabTitle<span class=\"token punctuation\">:</span> string<span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tabs<span class=\"token punctuation\">:</span>Tabs</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    tabs<span class=\"token punctuation\">.</span><span class=\"token function\">addTab</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And we shouldn’t forget that these components need to be declared on our application module:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">@<span class=\"token function\">NgModule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  imports<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>BrowserModule<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  declarations<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>Tab<span class=\"token punctuation\">,</span> Tabs<span class=\"token punctuation\">,</span> AppComponent<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  bootstrap<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>AppComponent<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppModule</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Where to go from here</h2>\n<p>This is a very rudimentary implementation of a tabs component. We can use that as a starting point to make it better over time. For example, we haven’t done anything in terms of accessibility. It would also be nice if the component emits some custom events when a tab is activated. We’ll cover working with events in Angular in another article.</p>\n<h2>Bonus</h2>\n<p>Angular is so awesome that there is not just one way how to do things!</p>\n<p>We can take a totally different approach how to implement our simple tabs ( which isn’t so easily possible in Angular 1.x ),\nleveraging special Angular <code class=\"language-text\">@ContentChildren</code> property decorator with <code class=\"language-text\">QueryList</code> type and <code class=\"language-text\">AfterContentInit</code> life cycle hook.\nThose are more advanced concepts, which are covered in more details by <a href=\"https://twitter.com/juristr\">Juri Strumpflohner</a> in <a href=\"http://juristr.com/blog/2016/02/learning-ng2-creating-tab-component\">his follow-up article</a>.</p>\n<p>If you’re just curious what it looks like, check out the demos below!</p>","frontmatter":{"author":"pascal_precht","title":"Developing a tabs component in Angular","imageUrl":null,"date":"09 April 2015","summary":"This article details how to build a simple, but widely used type of component in Angular: tabs.","categories":["angular"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/angular/2015/04/09/developing-a-tabs-component-in-angular-2.html","previous":{"fields":{"slug":"/angular/2015/03/27/building-a-zippy-component-in-angular-2.html"},"frontmatter":{"date":"2015/03/27","title":"Developing a zippy component in Angular","categories":["angular"]}},"next":{"fields":{"slug":"/announcements/2015/04/19/upcoming-events-in-2015.html"},"frontmatter":{"date":"2015/04/19","title":"Upcoming events in 2015","categories":["announcements"]}}}}}