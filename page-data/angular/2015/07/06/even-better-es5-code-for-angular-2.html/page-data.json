{"componentChunkName":"component---src-templates-blog-post-js","path":"/angular/2015/07/06/even-better-es5-code-for-angular-2.html","webpackCompilationHash":"0c5d630095500f933ccd","result":{"data":{"site":{"siteMetadata":{"title":"Articles by thoughtram","authors":[{"id":"pascal_precht","name":"Pascal Precht","twitter":"PascalPrecht","img":"https://avatars2.githubusercontent.com/u/445106?s=460&v=4"},{"id":"christoph_burgdorf","name":"Christoph Burgdorf","twitter":"cburgdorf","img":"https://avatars0.githubusercontent.com/u/521109?s=460&v=4"},{"id":"dominic_elm","name":"Dominic Elm","twitter":"d3lm","img":"https://avatars0.githubusercontent.com/u/12571019?s=400&v=4"},{"id":"thomas_burleson","name":"Thomas Burleson","twitter":"thomasburleson","img":"https://avatars3.githubusercontent.com/u/210413?s=400&v=4"},{"id":"elvira_eulitz","name":"Elvira Eulitz","twitter":"ElviraEulitz","img":"https://avatars3.githubusercontent.com/u/29247040?s=400&v=4"},{"id":"maxim_koretskyi","name":"Maxim Koretskyi","twitter":"maxim_koretskyi","img":"https://avatars3.githubusercontent.com/u/6124091?s=400&v=4"}]}},"markdownRemark":{"id":"458cf7f0-6997-59f4-b27d-c654c5bf7925","excerpt":"A couple of weeks ago we wrote about how to write Angular code in ES5 and took a closer look at what annotations and decorators translate to. While it is nice…","html":"<p>A couple of weeks ago we wrote about how to write <a href=\"/angular/2015/05/09/writing-angular-2-code-in-es5.html\">Angular code in ES5</a> and took a closer look at what <a href=\"/angular/2015/05/03/the-difference-between-annotations-and-decorators.html\">annotations and decorators</a> translate to. While it is nice that we can all write Angular applications without the hassle of setting up a development environment for TypeScript, Babel or SystemJS, it turns out that the syntax is still quite wordy. Of course, this isn’t really a big problem, because it is just the syntax after all. That’s why the Angular team works hard on making even the ES5 experience much better. All improvements that land in the ES5 world shrink the gap between Angular 1.x and Angular >= 2.x syntax, in fact, upgrading will be rather boring.</p>\n<p>In this article we’re going to take a closer look at the ES5 syntax improvements and how they make upgrading even easier.</p>\n<h2>Angular in ES5 before syntactical improvements</h2>\n<p>In order to understand the syntactical improvements in ES5 when building Angular applications, we have to understand what the code looked like before. Angular uses decorators to add meta data to it’s application code, which in TypeScript (or ES7) looks something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">@<span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  selector<span class=\"token punctuation\">:</span> <span class=\"token string\">'hello-cmp'</span><span class=\"token punctuation\">,</span>\n  template<span class=\"token punctuation\">:</span> <span class=\"token string\">'Hello World!'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloComponent</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>ES5 doesn’t have the concept of annotations or decorators. That’s why the code above translates to something like this, if we’d write it in ES5:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">HelloComponent</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nHelloComponent<span class=\"token punctuation\">.</span>annotations <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">ng<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    selector<span class=\"token punctuation\">:</span> <span class=\"token string\">'hello-cmp'</span><span class=\"token punctuation\">,</span>\n    template<span class=\"token punctuation\">:</span> <span class=\"token string\">'Hello World!'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>If this is entirely new to you, you might want to read our article on <a href=\"/angular/2015/05/09/writing-angular-2-code-in-es5.html\">Angular code in ES5</a> which gives a more detailed explanation of this code. This particular ES5 code totally does it’s job, but as mentioned earlier, the syntax is quite wordy. We won’t get around the fact that we have to assemble annotations for our components ourselves. However, this can easily be fixed since it’s really just syntax after all.</p>\n<p>Let’s take a look at how this can be done better with the more improved syntax for ES5.</p>\n<h2>Angular in ES5 after syntactical improvements</h2>\n<p>Angular comes with helper functions to create components and services right out of the box. Let’s take our <code class=\"language-text\">HelloComponent</code> and refactor it with the better syntax:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> HelloComponent <span class=\"token operator\">=</span> ng<span class=\"token punctuation\">.</span>core\n  <span class=\"token punctuation\">.</span><span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    selector<span class=\"token punctuation\">:</span> <span class=\"token string\">'hello-cmp'</span><span class=\"token punctuation\">,</span>\n    template<span class=\"token punctuation\">:</span> <span class=\"token string\">'Hello World!'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">Class</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">constructor</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>As we can see, <code class=\"language-text\">Component()</code> is pretty much the equivalent of <code class=\"language-text\">@Component</code> decorator. It takes care of creating annotations on our component, while we pass <code class=\"language-text\">ComponentArgs</code> to it accordingly. What about <code class=\"language-text\">Class()</code>? It’s pretty obvious that <code class=\"language-text\">Class()</code> takes the constructor function of our component, but can it also extend other “classes” or consume prototype methods as we would like to create?</p>\n<p>Yeap, all that is possible let’s quickly go through all possible properties of Angular’s <code class=\"language-text\">Class()</code> method.</p>\n<p><strong>constructor</strong></p>\n<p>Nothing special here. <code class=\"language-text\">constructor</code> is a constructor function which internally gets called with <code class=\"language-text\">Object.create()</code>.</p>\n<p><strong>extends</strong></p>\n<p>The <code class=\"language-text\">extends</code> property allows us to extend existing classes or components. Here’s a small example that shows what that could look like:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> OtherComponent <span class=\"token operator\">=</span> ng<span class=\"token punctuation\">.</span>core\n  <span class=\"token punctuation\">.</span><span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    selector<span class=\"token punctuation\">:</span> <span class=\"token string\">'other-cmp'</span><span class=\"token punctuation\">,</span>\n    template<span class=\"token punctuation\">:</span> <span class=\"token string\">'&lt;p>Other&lt;/p>'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">Class</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">constructor</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">var</span> HelloComponent <span class=\"token operator\">=</span> ng<span class=\"token punctuation\">.</span>\n  <span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    selector<span class=\"token punctuation\">:</span> <span class=\"token string\">'hello-cmp'</span><span class=\"token punctuation\">,</span>\n    template<span class=\"token punctuation\">:</span> <span class=\"token string\">'Hello World!'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">Class</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">extends</span><span class=\"token punctuation\">:</span> OtherComponent<span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">constructor</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>Prototype methods</strong></p>\n<p>We can define methods on our class simply by adding a property to it that is a function. In fact, every applied property in <code class=\"language-text\">Class()</code> has to be either a function or an array.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">Class</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">constructor</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'thoughtram'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">getName</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>That’s pretty straight forward. But why do properties have to be arrays otherwise? Remember <a href=\"/angular/2015/05/18/dependency-injection-in-angular-2.html\">dependency injection in Angular</a>? We can inject services and factories using <code class=\"language-text\">@Inject</code> decorators, but as we know, there are no decorators nor annotations in ES5. That’s where the array syntax comes in.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> HelloComponent <span class=\"token operator\">=</span> ng<span class=\"token punctuation\">.</span>core\n  <span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    selector<span class=\"token punctuation\">:</span> <span class=\"token string\">'hello-cmp'</span><span class=\"token punctuation\">,</span>\n    template<span class=\"token punctuation\">:</span> <span class=\"token string\">'Hello World!'</span><span class=\"token punctuation\">,</span>\n    viewProviders<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>Service<span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">Class</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    constructor<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>Service<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">service</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n      <span class=\"token operator\">...</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Conclusion</h2>\n<p>As we can see, the gap between Angular 1.x and Angular 2.x is not so big anymore. The ES5 syntax for Angular 2.x applications is getting closer to the ES2016 or TypeScript equivalent, which hopefully helps people to not be scared anymore. It’s really just syntax.</p>","frontmatter":{"author":"pascal_precht","title":"Even better ES5 code for Angular","imageUrl":null,"date":"06 July 2015","summary":"Nobody prevents us from writing Angular code in ES5. In this article we take a look at a new, much better, syntax to write Angular in ES5.","categories":["angular"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/angular/2015/07/06/even-better-es5-code-for-angular-2.html","previous":{"fields":{"slug":"/angular/2015/06/29/shadow-dom-strategies-in-angular2.html"},"frontmatter":{"date":"2015/06/29","title":"View Encapsulation in Angular","categories":["angular"]}},"next":{"fields":{"slug":"/angular/2015/07/07/service-vs-factory-once-and-for-all.html"},"frontmatter":{"date":"2015/07/07","title":"Service vs Factory - Once and for all","categories":["angular"]}}}}}