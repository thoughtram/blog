{"componentChunkName":"component---src-templates-blog-post-js","path":"/angular/2015/06/16/routing-in-angular-2.html","webpackCompilationHash":"0c5d630095500f933ccd","result":{"data":{"site":{"siteMetadata":{"title":"Articles by thoughtram","authors":[{"id":"pascal_precht","name":"Pascal Precht","twitter":"PascalPrecht","img":"https://avatars2.githubusercontent.com/u/445106?s=460&v=4"},{"id":"christoph_burgdorf","name":"Christoph Burgdorf","twitter":"cburgdorf","img":"https://avatars0.githubusercontent.com/u/521109?s=460&v=4"},{"id":"dominic_elm","name":"Dominic Elm","twitter":"d3lm","img":"https://avatars0.githubusercontent.com/u/12571019?s=400&v=4"},{"id":"thomas_burleson","name":"Thomas Burleson","twitter":"thomasburleson","img":"https://avatars3.githubusercontent.com/u/210413?s=400&v=4"},{"id":"elvira_eulitz","name":"Elvira Eulitz","twitter":"ElviraEulitz","img":"https://avatars3.githubusercontent.com/u/29247040?s=400&v=4"},{"id":"maxim_koretskyi","name":"Maxim Koretskyi","twitter":"maxim_koretskyi","img":"https://avatars3.githubusercontent.com/u/6124091?s=400&v=4"}]}},"markdownRemark":{"id":"bb8281f0-4d15-58d4-93b8-1efe7512ffd9","excerpt":"{% include deprecated.html %} Please read our new article Routing in Angular revisited If you’re following our articles on Angular you might know that, a couple…","html":"<p>{% include deprecated.html %}</p>\n<p><strong>Please read our new article <a href=\"/angular/2016/06/14/routing-in-angular-2-revisited.html\">Routing in Angular revisited</a></strong></p>\n<p>If you’re following our <a href=\"http://blog.thoughtram.io/categories/angular\">articles on Angular</a> you might know that, a couple of months ago, <a href=\"/angularjs/2015/02/19/futuristic-routing-in-angular.html\">we’ve written about the new router</a>, how it can be used, and how it differs from the <code class=\"language-text\">ngRoute</code> standard router. Whereas we mostly touched on using the router in Angular 1 applications, this article discusses how it can be used in Angular 2 applications.</p>\n<p>We won’t talk about how to get started with Angular 2. We assume that we’re all familiar with the installation process and how to bootstrap a small Angular 2 application. If this is entirely new to you, I recommend checking out our articles on <a href=\"/angular/2015/03/27/building-a-zippy-component-in-angular-2.html\">developing a zippy component</a> or <a href=\"/angular/2015/04/09/developing-a-tabs-component-in-angular-2.html\">developing a tabs component</a> in Angular 2. Another great starting point is the <a href=\"http://github.com/angular-class/angular2-webpack-starter\">starter kit</a> by our friends over at <a href=\"http://angularclass.com\">AngularClass</a>.</p>\n<h2>Bootstrapping the router</h2>\n<p>In order to use the new router, we need to import all needed components from the Angular framework and bind them to our component’s injector. Note that, even if in this article we’re importing straight from Angular, this might change in the future, since the router source has only temporarily been moved to the core.</p>\n<p>To avoid additional typing, and also to hide some boilerplate logic, the router module exports a variable <code class=\"language-text\">routerInjectables</code> which contains all injector bindings to get going. To give you an idea of what that looks like, here’s a small snippet from the router’s source:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">var</span> routerInjectables<span class=\"token punctuation\">:</span> List<span class=\"token operator\">&lt;</span>any<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  RouteRegistry<span class=\"token punctuation\">,</span>\n  Pipeline<span class=\"token punctuation\">,</span>\n  BrowserLocation<span class=\"token punctuation\">,</span>\n  Location<span class=\"token punctuation\">,</span>\n  <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>Router<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">registry<span class=\"token punctuation\">,</span> pipeline<span class=\"token punctuation\">,</span> location<span class=\"token punctuation\">,</span> appRoot</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RootRouter</span><span class=\"token punctuation\">(</span>registry<span class=\"token punctuation\">,</span> pipeline<span class=\"token punctuation\">,</span> location<span class=\"token punctuation\">,</span> appRoot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>\n    RouteRegistry<span class=\"token punctuation\">,</span>\n    Pipeline<span class=\"token punctuation\">,</span>\n    Location<span class=\"token punctuation\">,</span>\n    appComponentTypeToken\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>It’s really just a collection of binding declarations. If you see those kind of bindings for the very first time, you might want to read our article on <a href=\"/angular/2015/05/18/dependency-injection-in-angular-2.html\">dependency injection</a> in Angular 2. The short version is that each item in this collection describes how to create an object of a specific type when our application asks for an object of that type.</p>\n<p>For example the following binding tells the injector to create an instance of <code class=\"language-text\">RootRouter</code> whenever someone asks for an object of type <code class=\"language-text\">Router</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>Router<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">registry<span class=\"token punctuation\">,</span> pipeline<span class=\"token punctuation\">,</span> location<span class=\"token punctuation\">,</span> appRoot</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RootRouter</span><span class=\"token punctuation\">(</span>registry<span class=\"token punctuation\">,</span> pipeline<span class=\"token punctuation\">,</span> location<span class=\"token punctuation\">,</span> appRoot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>\n  RouteRegistry<span class=\"token punctuation\">,</span>\n  Pipeline<span class=\"token punctuation\">,</span>\n  Location<span class=\"token punctuation\">,</span>\n  appComponentTypeToken\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><em>The router exports a couple of other components that are needed thoughout our application, but we’ll cover them later in this article.</em></p>\n<p>Alright, now that we know what <code class=\"language-text\">routerInjectables</code> are, we can import and use them when bootstrapping our application, to make the router components available in our component’s dependency injector.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> bootstrap <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'angular2/angular2'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> routerInjectables <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'angular2/router'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">...</span> <span class=\"token comment\">// App is defined here</span>\n\n<span class=\"token function\">bootstrap</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>routerInjectables<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">bootstrap</code> takes a list of injector bindings as second argument. Those bindings are used when an injector is created. which means, passing <code class=\"language-text\">routerInjectables</code> here basically makes all the bindings application-wide available.</p>\n<p>For now we want to implement basic routing with a couple of components. All we need to do is to create a component that has a template with a navigation, and some router specific template logic. Let’s start small - here’s what our <code class=\"language-text\">App</code> component could look like (without router logic):</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">...</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Component<span class=\"token punctuation\">,</span> View <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'angular2/angular2'</span><span class=\"token punctuation\">;</span>\n\n@<span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  selector<span class=\"token punctuation\">:</span> <span class=\"token string\">'app'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n@<span class=\"token function\">View</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  template<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n    &lt;nav>\n      &lt;ul>\n        &lt;li>Start&lt;/li>\n        &lt;li>About&lt;/li>\n        &lt;li>Contact&lt;/li>\n      &lt;/ul>\n    &lt;/nav>\n    &lt;main>\n      // components go here\n    &lt;/main>\n  </span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">...</span></code></pre></div>\n<p>Pretty much an empty component with a template. We also take advantage of decorators, that’s why we need to import <code class=\"language-text\">Component</code> and <code class=\"language-text\">View</code>. You can read more about decorators (and also annotations) in our article on <a href=\"/angular/2015/05/03/the-difference-between-annotations-and-decorators.html\">the difference between annotations and decorators</a>. Annotations can be used in ES5 code as well. In case this is more interesting to you, <a href=\"/angular/2015/05/09/writing-angular-2-code-in-es5.html\">this article</a> shows you how.</p>\n<h2>Configuring routes</h2>\n<p>According to our application’s template, we seem to have a <code class=\"language-text\">Start</code>, an <code class=\"language-text\">About</code> and a <code class=\"language-text\">Contact</code> component. In order to be able to navigate to those components, we first need to configure the router in our application. As mentioned earlier, next to <code class=\"language-text\">routerInjectables</code>, there are other components that the router module exports. One of them is the <code class=\"language-text\">RouteConfig</code> class which can be used to decorate a component with routing capabilities.</p>\n<p><code class=\"language-text\">RouteConfig</code> takes a collection of route configurations. A route configuration is an object with a <code class=\"language-text\">path</code> and a <code class=\"language-text\">component</code>, so pretty much the same we have in Angular 1 too. Here’s what the route configuration for our <code class=\"language-text\">Start</code> component could look like:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">...</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Start <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./components/start'</span><span class=\"token punctuation\">;</span>\n\n@<span class=\"token function\">RouteConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> path<span class=\"token punctuation\">:</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> component<span class=\"token punctuation\">:</span> Start <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Easy right? One small difference compared to the Angular 1 version we see here, is that a component is provided as a class (or constructor function in ES5) instead of a string that represents the name of a component.</p>\n<p>That’s why we need to import our <code class=\"language-text\">Start</code> component first. Let’s take a quick look at what that component looks like:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">@<span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  selector<span class=\"token punctuation\">:</span> <span class=\"token string\">'start'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n@<span class=\"token function\">View</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  template<span class=\"token punctuation\">:</span> <span class=\"token string\">'&lt;h1>Start&lt;/h1>'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Start</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Nothing special here. Let’s make sure that our loaded component is actually displayed when the router activates it.</p>\n<h2>Displaying the component</h2>\n<p>In order to display the loaded component in our application, we need to specify the location in our application’s template. If you’ve read our first article on the new router,  you know that there’s a directive called <code class=\"language-text\">RouterOutlet</code> that lets us define a place in our template to display the loaded component.</p>\n<p>Let’s do that. All we need to do is to import the directive, extend our application’s <code class=\"language-text\">@View</code> annotation configuration and use the directive in the template:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">...</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> RouterOutlet <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'angular2/router'</span><span class=\"token punctuation\">;</span>\n\n@<span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  selector<span class=\"token punctuation\">:</span> <span class=\"token string\">'app'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n@<span class=\"token function\">View</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  directives<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>RouterOutlet<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  template<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n    &lt;nav>\n      &lt;ul>\n        &lt;li>Start&lt;/li>\n        &lt;li>About&lt;/li>\n        &lt;li>Contact&lt;/li>\n      &lt;/ul>\n    &lt;/nav>\n    &lt;main>\n      &lt;router-outlet>&lt;/router-outlet>\n    &lt;/main>\n  </span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">...</span></code></pre></div>\n<p><strong>That’s it</strong>! Since our route configuration says that <code class=\"language-text\">/</code> is mapped to our <code class=\"language-text\">Start</code> component, we don’t have to do anything special for now to activate that component - it is loaded by default.</p>\n<h2>Linking to other components</h2>\n<p>Of course, setting up a single route that is displayed by default, isn’t really what we’re looking for. Our application can have multiple route configurations and we also want to be able to navigate to each of them. But how can we achieve this? In <code class=\"language-text\">ngRoute</code> we just use normal links with <code class=\"language-text\">href</code> attributes and the module is smart enough to intercept accordingly. In UI-Router, we have a directive <code class=\"language-text\">uiSref</code> that takes a state name or a relative path to navigate to. What does the new router provide?</p>\n<p>Well, as you might know, the new router shares a code base for both, the Angular 1 and Angular 2 version. In our last article we explored the <code class=\"language-text\">router-link</code> directive, which allows us to navigate to components. <strong>Guess what, we can use the same in Angular 2</strong>!</p>\n<p>In Angular 2, the <code class=\"language-text\">RouterLink</code> directive is exported by the router module. In order to use it, we need to import it first and declare it as directive dependency of our component’s template, just like <code class=\"language-text\">RouterOutlet</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">...\nimport { RouterOutlet, RouterLink } from &#39;angular2/router&#39;;\n\n@Component({\n  selector: &#39;app&#39;\n})\n@View({\n  directives: [RouterOutlet, RouterLink],\n  ...\n})\nclass App {\n\n}\n...</code></pre></div>\n<p>Awesome, now it can be used in the template. Let’s extend our navigation with proper links that make use of <code class=\"language-text\">RouterLink</code>. The directive takes a component name and if the underlying DOM element is an anchor element, it generates a URL based on the component’s route configuration, which is then added to it as part of the <code class=\"language-text\">href</code> attribute.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>nav</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">router-link</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>start<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Start<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">router-link</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>about<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>About<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">router-link</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>contact<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Contact<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>nav</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>You might wonder, how the directive knows that <code class=\"language-text\">&quot;start&quot;</code> should generate a URL for our <code class=\"language-text\">Start</code> component. In fact, it can’t until we extend our router configuration. Next to <code class=\"language-text\">path</code> and <code class=\"language-text\">component</code> there’s another configuration property <code class=\"language-text\">as</code> that allows us to expose a router configuration under a given name.</p>\n<p>E.g. if we want to use <code class=\"language-text\">start</code> as an “alias” for the route configuration for the <code class=\"language-text\">Start</code> component, we simply have to add the configuration accordingly. While we are at it, we do the same for the other two components, and just assume that we’ve built them already:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Start <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./components/start'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> About <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./components/about'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Contact <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./components/contact'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">...</span>\n\n@<span class=\"token function\">RouteConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> path<span class=\"token punctuation\">:</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> component<span class=\"token punctuation\">:</span> Start<span class=\"token punctuation\">,</span> <span class=\"token keyword\">as</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'start'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> path<span class=\"token punctuation\">:</span> <span class=\"token string\">'/about'</span><span class=\"token punctuation\">,</span> component<span class=\"token punctuation\">:</span> About<span class=\"token punctuation\">,</span> <span class=\"token keyword\">as</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'about'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> path<span class=\"token punctuation\">:</span> <span class=\"token string\">'/contact'</span><span class=\"token punctuation\">,</span> component<span class=\"token punctuation\">:</span> Contact<span class=\"token punctuation\">,</span> <span class=\"token keyword\">as</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'contact'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Now the router actually knows for what to generate URLs when using <code class=\"language-text\">RouterLink</code>. Cool, we can navigate to single components throughout our application, but what if we have components that use more than one <code class=\"language-text\">RouterOutlet</code>?</p>\n<h2>Routes with sibling outlets</h2>\n<p>It’s very common to have sibling outlets in a state (or component). In Angular 1, the UI-Router comes with a <strong>very</strong> powerful mechanism to support sibling states. Of course, such a feature is supported in the new component router too. At the time of writing this article, <strong>this feature was still in development and didn’t work yet</strong>, but we can still take a look at what the APIs will look like.</p>\n<p>Having a component with multiple outlets is easy. Let’s say we have a dashboard component component that needs to load a navigation component and a statistics component. First we would of course setup a route config to be able to navigate to the dashboard component.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Dashboard <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./components/dashboard'</span><span class=\"token punctuation\">;</span>\n\n@<span class=\"token function\">RouteConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> path<span class=\"token punctuation\">:</span> <span class=\"token string\">'/dashboard'</span><span class=\"token punctuation\">,</span> component<span class=\"token punctuation\">:</span> Dashboard<span class=\"token punctuation\">,</span> <span class=\"token keyword\">as</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'dashboard'</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Alright, nothing new here. Let’s jump over to the dashboard component. The dashboard defines two sibling outlets. In order to tell the router what to load into those siblings, we can give them names and reference them to components accordingly in our route configuration. Here’ what the configuration of the dashboard component could look like:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Navigation <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./components/navigation'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Statistics <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./components/statistics'</span><span class=\"token punctuation\">;</span>\n\n@<span class=\"token function\">RouteConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    path<span class=\"token punctuation\">:</span> <span class=\"token string\">'/dashboard'</span><span class=\"token punctuation\">,</span>\n    components<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      navigation<span class=\"token punctuation\">:</span> Navigation<span class=\"token punctuation\">,</span>\n      statistics<span class=\"token punctuation\">:</span> Statistics\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">as</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'dashboard'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Dashboard</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span>\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">js\n\n&lt;p style=\"background: #F2AEAE; border-radius: 0.3em; margin-top: 1.4em; padding: 1em; border: #F56B6B 1px solid;\">&lt;strong>Attention&lt;/strong>: &lt;br>\nThe &lt;code>components&lt;/code> property has been removed as of &lt;a href=\"https://github.com/angular/angular/issues/2329\">#2329&lt;/a> but the feature will be reintroduced with a different mechanism.\n&lt;/p>\n\nAgain, </span><span class=\"token template-punctuation string\">`</span></span>Navigation<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"> and </span><span class=\"token template-punctuation string\">`</span></span>Statistics<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"> are really just two components that don't even have to know that they are part of a route configuration. We can also see how the </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token keyword\">as</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"> property in the route configuration can be nicely used as an alias for component combinations.\n\n## There's so much more coming\n\nThis article gives us just a little picture of how the new router can be used in Angular 2 compared to Angular 1. As you can see a lot of things are very similar, **which will surely help when migrating to Angular 2**. Of course, there are more things to cover, like how to deal with nested components and how to do dynamic routing using </span><span class=\"token template-punctuation string\">`</span></span>Router`<span class=\"token punctuation\">.</span> Those things will be part <span class=\"token keyword\">of</span> future articles<span class=\"token punctuation\">.</span></code></pre></div>","frontmatter":{"author":"pascal_precht","title":"Routing in Angular","imageUrl":null,"date":"16 June 2015","summary":"Learn how to route between components. In this article we explore how to use the new router in Angular.","categories":["angular"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/angular/2015/06/16/routing-in-angular-2.html","previous":{"fields":{"slug":"/2015-06-06-ng-messages-revisited/"},"frontmatter":{"date":"2015/06/06","title":"ngMessages revisited","categories":null}},"next":{"fields":{"slug":"/annoucements/2015/06/17/anouncing-hanovers-second-rust-meetup.html"},"frontmatter":{"date":"2015/06/17","title":"Anouncing Hanover's second Rust meetup","categories":["annoucements"]}}}}}