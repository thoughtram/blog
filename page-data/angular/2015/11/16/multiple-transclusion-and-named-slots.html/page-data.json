{"componentChunkName":"component---src-templates-blog-post-js","path":"/angular/2015/11/16/multiple-transclusion-and-named-slots.html","webpackCompilationHash":"0c5d630095500f933ccd","result":{"data":{"site":{"siteMetadata":{"title":"Articles by thoughtram","authors":[{"id":"pascal_precht","name":"Pascal Precht","twitter":"PascalPrecht","img":"https://avatars2.githubusercontent.com/u/445106?s=460&v=4"},{"id":"christoph_burgdorf","name":"Christoph Burgdorf","twitter":"cburgdorf","img":"https://avatars0.githubusercontent.com/u/521109?s=460&v=4"},{"id":"dominic_elm","name":"Dominic Elm","twitter":"d3lm","img":"https://avatars0.githubusercontent.com/u/12571019?s=400&v=4"},{"id":"thomas_burleson","name":"Thomas Burleson","twitter":"thomasburleson","img":"https://avatars3.githubusercontent.com/u/210413?s=400&v=4"},{"id":"elvira_eulitz","name":"Elvira Eulitz","twitter":"ElviraEulitz","img":"https://avatars3.githubusercontent.com/u/29247040?s=400&v=4"},{"id":"maxim_koretskyi","name":"Maxim Koretskyi","twitter":"maxim_koretskyi","img":"https://avatars3.githubusercontent.com/u/6124091?s=400&v=4"}]}},"markdownRemark":{"id":"a99c9b2e-df18-5680-9873-cd8fde749afe","excerpt":"With the upcoming final 1.5 release of the AngularJS framework, tons of new features, improvements and bug fixes are right around the corner. One of those…","html":"<p>With the upcoming final 1.5 release of the AngularJS framework, tons of new features, improvements and bug fixes are right around the corner. One of those features is <strong>multiple transclusion via named slots</strong>. While transclusion is already a very nice and powerful feature, with the 1.5 release it’s going to be taken to the next level. In this article we’re going to discuss what multiple transclusion is all about and how it helps the framework to align more with the web components technologies.</p>\n<h2>Understanding Transclusion</h2>\n<p>We surely don’t have to make a huge recap on what transclusion is, since there are tons of resources out there in the internet already and most of us are probably very familiar with that feature. However, just to pick up everyone reading this article, here’s what transclusion is (stolen from <a href=\"https://en.wikipedia.org/wiki/Transclusion\">Wikipedia</a>):</p>\n<blockquote>\n<p>In computer science, transclusion is the inclusion of part or all of an electronic document into one or more other documents by reference.</p>\n</blockquote>\n<p>Clear, right? Well, not really.</p>\n<p>It’s actually way simpler than it sounds. In Angular world, when we build directives, transclusion allows us to take the HTML from the outer world, that is in between our directive tags, and insert it somewhere inside our directive template, which the outside world doesn’t really know about.</p>\n<p>The easiest way to illustrate that is the <code class=\"language-text\">&lt;details&gt;</code> element. <code class=\"language-text\">&lt;details&gt;</code> renders a UI component (in some browers), which we can click on to open and close it.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>details</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>Hey y'all I've put some content here.<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>details</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>As you can see, we can put some HTML in between the <code class=\"language-text\">&lt;details&gt;</code> tags and it gets somehow magically projected somewhere else. The thing that makes this possible are <strong>Content Insertion Points</strong> which are part of the <strong>Shadow DOM</strong> specification. They allow us to mark places in an element’s template where Light DOM is going to be projected.</p>\n<p>Angular’s transclusion feature is basically some sort of polyfill for this kind of functionality, however, pretty much implemented in an Angular specific way. It really just works with the framework.</p>\n<p>We can easily reimplement a <code class=\"language-text\">&lt;details&gt;</code> element with Angular like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">angular<span class=\"token punctuation\">.</span><span class=\"token function\">module</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myApp'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">.</span><span class=\"token function\">directive</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ngDetails'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    restrict<span class=\"token punctuation\">:</span> <span class=\"token string\">'E'</span><span class=\"token punctuation\">,</span>\n    scope<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    transclude<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    template<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n      &lt;div class=\"summary\" ng-click=\"open = !open\">\n        {{ open ? '&amp;blacktriangledown;' : '&amp;blacktriangleright;' }} Details\n      &lt;/div>\n      &lt;div class=\"content\" ng-show=\"open\" ng-transclude>&lt;/div>\n    </span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Setting <code class=\"language-text\">transclude</code> to <code class=\"language-text\">true</code> enables transclusion for the directive, whereas <code class=\"language-text\">ng-transclude</code> in the template tells Angular where to put the HTML from the outside world. Of course, this is a very very simple reimplementation, but it’s really just to demonstrate the point of transclusion.</p>\n<p><a href=\"http://twitter.com/teropa\">Tero</a> has written an <a href=\"http://teropa.info/blog/2015/06/09/transclusion.html\">amazing guide</a> on transclusion, if you want to dig deeper on that topic I highly recommend his guide.</p>\n<p>Even though transclusion is a very neat feature to provide APIs where consumers can hook into, it turns out that there’s at least one drawback. We either take everything or nothing. Whenever we use transclusion, there’s no way to specify <strong>what</strong> we want to transclude, we always have to take the whole DOM. This is where Shadow DOM and Content Insertion Points really shine.</p>\n<h2>Content Selection and Shadow DOM</h2>\n<p>Shadow DOM uses a <code class=\"language-text\">&lt;content&gt;</code> tag to specify insertion points. If we’d reimplement the <code class=\"language-text\">&lt;details&gt;</code> tag with web components technologies, our component’s template could look something like this (simplified):</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>summary<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  Details\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>content<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>content</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>content</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>This is more or less the equivalent of transclusion in Angular. However, Shadow DOM takes it even further. It allows us to specify what we want to project into our shadow DOM. This is where the <code class=\"language-text\">select</code> attribute comes into play. Let’s say we’re only interested in projecting <code class=\"language-text\">&lt;h2&gt;</code> elements, we can update our template with content selection like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"summary\"</span><span class=\"token operator\">></span>\n  Details\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"content\"</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>content select<span class=\"token operator\">=</span><span class=\"token string\">\"h2\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>content<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></code></pre></div>\n<p>Super powerful! The specification has even evolved more with another <code class=\"language-text\">&lt;slot&gt;</code> tag which is a bit more powerful. However, after all it everything boils down to what we’ve seen so far. </p>\n<p>This is where multiple transclusion comes into play, <strong>with Angular 1.5 we can finally do exactly that</strong>!</p>\n<h2>Multiple Transclusion</h2>\n<p>Multiple transclusion has been proposed a loooong time ago. In fact, Vojta <a href=\"https://github.com/angular/angular.js/issues/4357\">came up with this</a> over two years ago. Now, thanks to <a href=\"https://github.com/angular/angular.js/commit/a4ada8ba9c4358273575e16778e76446ad080054\">Pete</a>, it’s right here. So let’s get back to our <code class=\"language-text\">&lt;ng-details&gt;</code> implementation and take a look at it.</p>\n<p>The <code class=\"language-text\">&lt;details&gt;</code> tag allows us to configure a “summary” which defaults to <code class=\"language-text\">&quot;Details&quot;</code>. In order to change it, all we have to do is to put a <code class=\"language-text\">&lt;summary&gt;</code> tag inside the <code class=\"language-text\">&lt;details&gt;</code> element like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>details</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>summary</span><span class=\"token punctuation\">></span></span>Click me!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>summary</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>Hey y'all I've put some content here.<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>details</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>This we couldn’t do with Angular’s transclusion before, because we can’t just take all the DOM as it is. We would need to take the <code class=\"language-text\">&lt;summary&gt;</code>, transclude at a specific place in our template, and then we’d need to transclude the rest somewhere else.</p>\n<p>With multpile transclusion we can totally do that. We just have to extend our directive a tiny little bit (note that we’re using <code class=\"language-text\">&lt;span&gt;</code> as summary element, but you can use whatever you want):</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">angular<span class=\"token punctuation\">.</span><span class=\"token function\">module</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myApp'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">.</span><span class=\"token function\">directive</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ngDetails'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    restrict<span class=\"token punctuation\">:</span> <span class=\"token string\">'E'</span><span class=\"token punctuation\">,</span>\n    scope<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    transclude<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">'summarySlot'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'span'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    template<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n      &lt;div class=\"summary\" ng-click=\"open = !open\">\n        {{ open ? '&amp;blacktriangledown;' : '&amp;blacktriangleright;' }} &lt;span ng-transclude=\"summarySlot\">&lt;/span>\n      &lt;/div>\n      &lt;div class=\"content\" ng-show=\"open\" ng-transclude>&lt;/div>\n    </span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>We basically made two changes:</p>\n<ul>\n<li>We changed the <code class=\"language-text\">transclude</code> property to an object which specifies the transclusion slots. The key is the name of a <s>element or directive in camel-case</s> slot we can later use in our template, the value the name of an <s>element or directive in camel-case</s> we want to transclude.</li>\n<li>We replaced the default <code class=\"language-text\">&quot;Details&quot;</code> summary with an element that has <code class=\"language-text\">ng-transclude=&quot;summarySlot&quot;</code>. As you can see, <code class=\"language-text\">ng-transclude</code> now excepts a string which is the name of a transclusion slot that we’ve defined earlier.</li>\n</ul>\n<p>The original <code class=\"language-text\">ng-transclude</code> stays as is, since it simply takes the rest to be transcluded. We can now use our <code class=\"language-text\">&lt;ng-details&gt;</code> component like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ng-details</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>Details<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>More content here<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ng-details</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>We can even make transclusion slots optional by prefixing the element tag name with a <code class=\"language-text\">?</code> like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">transclude<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">'summarySlot'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'?span'</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This is already very cool, but our <code class=\"language-text\">ng-details</code> directive still lacks one specific behaviour. If we don’t specify a <code class=\"language-text\">&lt;summary&gt;</code>, <code class=\"language-text\">&lt;details&gt;</code> defaults to <code class=\"language-text\">&quot;Details&quot;</code>. Our component however, doesn’t do this. We can provide a fallback summary by simply putting something into the DOM where other elements will be transcluded to:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>summary<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ng-click</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>open = !open<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  {{ open ? '&amp;blacktriangledown;' : '&amp;blacktriangleright;' }} <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">ng-transclude</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>summarySlot<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Details<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Seen what happened? We just put <code class=\"language-text\">&quot;Details&quot;</code> as text into our span element. This text will be replace with the transcluded DOM, if it is applied.</p>\n<p>What are you waiting for? Start using multiple transclusion in your directives and design beautful APIs for your consumers!</p>","frontmatter":{"author":"pascal_precht","title":"Multiple Transclusion and named Slots","imageUrl":null,"date":"16 November 2015","summary":"One of those bigger features in the 1.5 release is multiple transclusion via named slots. In this article we're going to discuss what it's all about.","categories":["angular"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/angular/2015/11/16/multiple-transclusion-and-named-slots.html","previous":{"fields":{"slug":"/announcements/2015/10/26/angular-master-class-extended-ngupgrade.html"},"frontmatter":{"date":"2015/10/26","title":"Angular Master Class Extended: ngUpgrade","categories":["announcements"]}},"next":{"fields":{"slug":"/announcements/2015/11/19/how-we-run-trainings.html"},"frontmatter":{"date":"2015/11/19","title":"How we run trainings","categories":["announcements"]}}}}}