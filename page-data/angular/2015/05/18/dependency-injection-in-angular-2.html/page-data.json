{"componentChunkName":"component---src-templates-blog-post-js","path":"/angular/2015/05/18/dependency-injection-in-angular-2.html","webpackCompilationHash":"0c5d630095500f933ccd","result":{"data":{"site":{"siteMetadata":{"title":"Articles by thoughtram","authors":[{"id":"pascal_precht","name":"Pascal Precht","twitter":"PascalPrecht","img":"https://avatars2.githubusercontent.com/u/445106?s=460&v=4"},{"id":"christoph_burgdorf","name":"Christoph Burgdorf","twitter":"cburgdorf","img":"https://avatars0.githubusercontent.com/u/521109?s=460&v=4"},{"id":"dominic_elm","name":"Dominic Elm","twitter":"d3lm","img":"https://avatars0.githubusercontent.com/u/12571019?s=400&v=4"},{"id":"thomas_burleson","name":"Thomas Burleson","twitter":"thomasburleson","img":"https://avatars3.githubusercontent.com/u/210413?s=400&v=4"},{"id":"elvira_eulitz","name":"Elvira Eulitz","twitter":"ElviraEulitz","img":"https://avatars3.githubusercontent.com/u/29247040?s=400&v=4"},{"id":"maxim_koretskyi","name":"Maxim Koretskyi","twitter":"maxim_koretskyi","img":"https://avatars3.githubusercontent.com/u/6124091?s=400&v=4"}]}},"markdownRemark":{"id":"cf1275c4-4afb-5965-b2e0-0ee2d382c525","excerpt":"Dependency injection has always been one of Angular’s biggest features and selling points. It allows us to inject dependencies in different components across…","html":"<p>Dependency injection has always been one of Angular’s biggest features and selling points. It allows us to inject dependencies in different components across our applications, without needing to know, how those dependencies are created, or what dependencies they need themselves. However, it turns out that the current dependency injection system in Angular 1.x has some problems that need to be solved in Angular 2.x, in order to build the next generation framework. In this article, we’re going to explore the new dependency injection system for future generations.</p>\n<p>Before we jump right into the new stuff, lets first understand what dependency injection is, and what the problems with the DI in Angular 1 are.</p>\n<div class=\"thtrm-tldr\" markdown=\"1\">\n<h3>TLDR;</h3>\n<p>An injector creates dependencies using providers. Providers are recipes that know how to create dependencies. Type annotations in TypeScript can be used to ask for dependencies and Every component has its own injector, resulting in an injector tree. The injector tree enables transient dependencies.</p>\n<h4>How to inject a service in Angular?</h4>\n<ol>\n<li>Create a provider either on your <code class=\"language-text\">@NgModule</code>, <code class=\"language-text\">@Component</code>, or <code class=\"language-text\">@Directive</code> using a type or a string as provider token.</li>\n<li>\n<p>Inject the service in the component’s constructor where it’s needed using that configured token.</p>\n</div>\n</li>\n</ol>\n<h2>Dependency Injection as a pattern</h2>\n<p><a href=\"http://twitter.com/vojtajina\">Vojta Jina</a> gave a great talk on dependency injection at <a href=\"https://www.youtube.com/watch?v=_OGGsf1ZXMs\">ng-conf 2014</a>. In this talk, he presented the story and ideas of the new DI system that will be developed for Angular. He also made very clear, that we can see DI as two things: As a design pattern and as a framework. Whereas the former explains the pattern that DI is all about, the latter can be a system that helps us out maintaining and assembling dependencies. I’d like to do the same in this article as it helps us understanding the concept first.</p>\n<p>We start by taking a look at the following code and analysing the problems it introduces.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Car</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>engine <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Engine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tires <span class=\"token operator\">=</span> Tires<span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>doors <span class=\"token operator\">=</span> app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'doors'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Nothing special here. We have a class <code class=\"language-text\">Car</code> that has a constructor in which we set up everything we need in order to construct a car object once needed. What’s the problem with this code? Well, as you can see, the constructor not only assigns needed dependencies to internal properties, it also knows how those object are created. For example the engine object is created using the <code class=\"language-text\">Engine</code> constructor, <code class=\"language-text\">Tires</code> seems to be a singleton interface and the doors are requested via a global object that acts as a <strong>service locator</strong>.</p>\n<p>This leads to code that is hard to maintain and even harder to test. Just imagine you’d like to test this class. How would you replace <code class=\"language-text\">Engine</code> with a <code class=\"language-text\">MockEngine</code> dependency in that code? When writing tests, we want to test different scenarios that our code is used in, hence each scenario needs its own configuration. If we want to write testable code, we need to write reusable code. Our code should work in any environment as long as all dependencies are satisfied. Which brings us to the conclusion that <strong>testable code is reusable code</strong> and vise versa.</p>\n<p>So how can we write this code better and make it more testable? It’s super easy and you probably already know what to do. We change our code to this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Car</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">engine<span class=\"token punctuation\">,</span> tires<span class=\"token punctuation\">,</span> doors</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>engine <span class=\"token operator\">=</span> engine<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tires <span class=\"token operator\">=</span> tires<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>doors <span class=\"token operator\">=</span> doors<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>All we did is we moved the dependency creation out of the constructor and extended the constructor function to expect all needed dependencies. There are no concrete implementations anymore in this code, we literally moved the responsibility of creating those dependencies to a higher level. If we want to create a car object now, all we have to do is to pass all needed dependencies to the constructor:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> car <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">Engine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">Tires</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">Doors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>How cool is that? The dependencies are now decoupled from our class, which allows us to pass in mocked dependencies in case we’re writing tests:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> car <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">MockEngine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">MockTires</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">MockDoors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>And guess what, <strong>this is dependency injection</strong>. To be a bit more specific, this particular pattern is also called <strong>constructor injection</strong>. There are two other injection patterns, setter injection and interface injection, but we won’t cover them in this article.</p>\n<p>Okay cool, now we use DI, but when comes a DI <strong>system</strong> into play? As mentioned before, we literally moved the responsibility of dependency creation to a higher level. And this is exactly what our new problem is. Who takes care of assembling all those dependencies for us? It’s us.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> engine <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Engine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> tires <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Tires</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> doors <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Doors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> car <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span>engine<span class=\"token punctuation\">,</span> tires<span class=\"token punctuation\">,</span> doors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  car<span class=\"token punctuation\">.</span><span class=\"token function\">drive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We need to maintain a <code class=\"language-text\">main</code> function now. Doing that manually can be quite hairy, especially when the application gets bigger and bigger. Wouldn’t it be nice if we could do something like this?</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> injector <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Injector</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">var</span> car <span class=\"token operator\">=</span> injector<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>Car<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  car<span class=\"token punctuation\">.</span><span class=\"token function\">drive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Dependency Injection as a framework</h2>\n<p>This is where dependency injection as a framework comes in. As we all know, Angular 1 has it’s own DI system which allows us to annotate services and other components and let the injector find out, what dependencies need to be instantiated. For example, the following code shows how we can annotate our <code class=\"language-text\">Car</code> class in Angular 1:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Car</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span>\n\nCar<span class=\"token punctuation\">.</span>$inject <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Engine'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Tires'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Doors'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Then, we register our <code class=\"language-text\">Car</code> as a service and whenever we ask for it, we get a singleton instance of it without needing to care about creating needed dependencies for the car.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> app <span class=\"token operator\">=</span> angular<span class=\"token punctuation\">.</span><span class=\"token function\">module</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myApp'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">service</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Car'</span><span class=\"token punctuation\">,</span> Car<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">service</span><span class=\"token punctuation\">(</span><span class=\"token string\">'OtherService'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">Car</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n  <span class=\"token comment\">// instance of Car available</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This is all cool but it turns out, that the existing DI has some problem though:</p>\n<ul>\n<li><strong>Internal cache</strong> - Dependencies are served as singletons. Whenever we ask for a service, it is created only once per application lifecycle. Creating factory machinery is quite hairy.</li>\n<li><strong>Namespace collision</strong> - There can only be one token of a “type” in an application. If we have a car service, and there’s a third-party extension that also introduces a service with the same name, we have a problem.</li>\n<li><strong>Built into the framework</strong> - Angular 1’s DI is baked right into the framework. There’s no way for us to use it decoupled as a standalone system.</li>\n</ul>\n<p>These problems need to be solved in order to take the DI of Angular to the next level.</p>\n<h2>Dependency Injection in Angular</h2>\n<div class=\"thtrm-tldr\" markdown=\"1\">\n<h3>Attention</h3>\n<p>The <code class=\"language-text\">ReflectiveInjector</code> APIs discussed in this article are deprecated as of <a href=\"https://github.com/angular/angular/commit/fcadbf4bf6d00ea5b250a8069e05b3e4bd000a29\">this commit</a>.</p>\n<p>To learn about the newer <code class=\"language-text\">StaticInjector</code> API, head over to <a href=\"#new-staticinjector-apis\">this section</a>. However, concepts are still exactly the same, so it’s worthwhile to keep on reading.</p>\n</div>\n<p>Before we take a look at actual code, let’s first understand the concept behind the new DI in Angular. The following graphic illustrates required components in the new DI system:</p>\n<p><img src=\"/fa57b8e3602b8eb222041a75460c72f9/di-in-angular2-5.svg\" alt=\"DI in Angular\"></p>\n<p>The DI in Angular basically consists of three things:</p>\n<ul>\n<li><strong>Injector</strong> - The injector object that exposes APIs to us to create instances of dependencies.</li>\n<li><strong>Provider</strong> - A provider is like a recipe that tells the injector <strong>how</strong> to create an instance of a dependency. A provider takes a token and maps that to a factory function that creates an object.</li>\n<li><strong>Dependency</strong> - A dependency is the <strong>type</strong> of which an object should be created.</li>\n</ul>\n<p>Okay, now that we have an idea of what the concept looks like, lets see how this is translated to code. We stick with our <code class=\"language-text\">Car</code> class and it’s dependencies. Here’s how we can use Angular’s DI to get an instance of <code class=\"language-text\">Car</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ReflectiveInjector <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@angular/core'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> injector <span class=\"token operator\">=</span> ReflectiveInjector<span class=\"token punctuation\">.</span><span class=\"token function\">resolveAndCreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  Car<span class=\"token punctuation\">,</span>\n  Engine<span class=\"token punctuation\">,</span>\n  Tires<span class=\"token punctuation\">,</span>\n  Doors\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          \n<span class=\"token keyword\">var</span> car <span class=\"token operator\">=</span> injector<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>Car<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>We import <code class=\"language-text\">ReflectiveInjector</code> from Angular which is an injector implementation that exposes some static APIs to create injectors. <code class=\"language-text\">resolveAndCreate()</code> is basically a factory function that creates an injector and takes a list of providers. We’ll explore how those classes are supposed to be providers in a second, but for now we focus on <code class=\"language-text\">injector.get()</code>. See how we ask for an instance of <code class=\"language-text\">Car</code> in the last line? How does our injector know, which dependencies need to be created in order to instantiate a car? A look at our <code class=\"language-text\">Car</code> class will explain…</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Inject <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@angular/core'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Car</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>\n    <span class=\"token parameter\">@<span class=\"token function\">Inject</span><span class=\"token punctuation\">(</span>Engine<span class=\"token punctuation\">)</span> engine<span class=\"token punctuation\">,</span>\n    @<span class=\"token function\">Inject</span><span class=\"token punctuation\">(</span>Tires<span class=\"token punctuation\">)</span> tires<span class=\"token punctuation\">,</span>\n    @<span class=\"token function\">Inject</span><span class=\"token punctuation\">(</span>Doors<span class=\"token punctuation\">)</span> doors</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We import something called <code class=\"language-text\">Inject</code> from the framework and apply it as decorator to our constructor parameters. If you don’t know what decorators are, you might want to read our articles on <a href=\"/angular/2015/05/03/the-difference-between-annotations-and-decorators.html\">the difference between decorators and annotations</a> and how to <a href=\"/angular/2015/05/09/writing-angular-2-code-in-es5.html\">write Angular code in ES5</a>.</p>\n<p>The <code class=\"language-text\">Inject</code> decorator attaches meta data to our <code class=\"language-text\">Car</code> class, that is then consumed by the DI system afterwards. So basically what we’re doing here, is that we tell the DI that the first constructor parameter should be an instance of type <code class=\"language-text\">Engine</code>, the second of type <code class=\"language-text\">Tires</code> and the third of type <code class=\"language-text\">Doors</code>. We can rewrite this code to TypeScript, which feels a bit more natural:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Car</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">engine<span class=\"token punctuation\">:</span> Engine<span class=\"token punctuation\">,</span> tires<span class=\"token punctuation\">:</span> Tires<span class=\"token punctuation\">,</span> doors<span class=\"token punctuation\">:</span> Doors</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Nice, our class declares it’s own dependencies and the DI can read that information to instantiate whatever is needed to create an object of <code class=\"language-text\">Car</code>. But how does the injector know <strong>how</strong> to create such an object? This is where the providers come into play. Remember the <code class=\"language-text\">resolveAndCreate()</code> method in which we passed a list of classes?</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> injector <span class=\"token operator\">=</span> ReflectiveInjector<span class=\"token punctuation\">.</span><span class=\"token function\">resolveAndCreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  Car<span class=\"token punctuation\">,</span>\n  Engine<span class=\"token punctuation\">,</span>\n  Tires<span class=\"token punctuation\">,</span>\n  Doors\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Again, you might wonder how this list of classes is supposed to be a list of providers. Well, it turns out that this is actually a shorthand syntax. If we translate this to the longer, more verbose, syntax, things might become a bit more clear.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> injector <span class=\"token operator\">=</span> RelfectiveInjector<span class=\"token punctuation\">.</span><span class=\"token function\">resolveAndCreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> provide<span class=\"token punctuation\">:</span> Car<span class=\"token punctuation\">,</span> useClass<span class=\"token punctuation\">:</span> Car <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> provide<span class=\"token punctuation\">:</span> Engine<span class=\"token punctuation\">,</span> useClass<span class=\"token punctuation\">:</span> Engine <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> provide<span class=\"token punctuation\">:</span> Tires<span class=\"token punctuation\">,</span> useClass<span class=\"token punctuation\">:</span> Tires <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> provide<span class=\"token punctuation\">:</span> Doors<span class=\"token punctuation\">,</span> useClass<span class=\"token punctuation\">:</span> Doors <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>We have an object with a <code class=\"language-text\">provide</code> property, that maps a <strong>token</strong> to a configuration object. The token can either be a type or a string. If you read those providers now, it’s much easier to understand what’s happening. We provide an instance of type <code class=\"language-text\">Car</code> via the class <code class=\"language-text\">Car</code>,  type <code class=\"language-text\">Engine</code> via the class <code class=\"language-text\">Engine</code> and so on and so forth. This is the recipe mechanism we were talking about earlier. So with the providers we not only let the injector know which dependencies are used across the application, we also configure how objects of these dependencies are created.</p>\n<p>Now the next question comes up: When do we want to use the longer instead of the shorthand syntax? There’s no reason to write <code class=\"language-text\">{ provide: Foo, useClass: Foo}</code> if we could just stick with <code class=\"language-text\">Foo</code>, right? Yes, that’s correct. That’s why we started with the shorthand syntax in the first place. However, the longer syntax enables us to do something very very powerful. Take a look at the next code snippet.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span> provide<span class=\"token punctuation\">:</span> Engine<span class=\"token punctuation\">,</span> useClass<span class=\"token punctuation\">:</span> OtherEngine <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Right. We can map a token to pretty much what ever we want. Here we’re mapping the token <code class=\"language-text\">Engine</code> to the class <code class=\"language-text\">OtherEngine</code>. Which means, when we now ask for an object of type <code class=\"language-text\">Engine</code>, we get an instance of class <code class=\"language-text\">OtherEngine</code>.</p>\n<p>This is super powerful, because this allows us not only to prevent name collisions, we can also create a type as interface and bind it to a concrete implementation. In addition to that, we can swap out the actual dependency for a token in a single place without touching any other code.</p>\n<p>Angular’s DI introduces a couple of other provider recipes which we explore in the next section.</p>\n<h2>Other provider configurations</h2>\n<p>Sometimes, we don’t want to get an instance of a class, but rather just a single value of something or a factory function where more configuration is needed. That’s why the provider mechanism of Angular’s DI comes with more than just one recipe. Lets take a quick look at them.</p>\n<p><strong>Providing values</strong></p>\n<p>We can provide a simple value using <code class=\"language-text\">useValue: value</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span> provide<span class=\"token punctuation\">:</span> <span class=\"token string\">'some value'</span><span class=\"token punctuation\">,</span> useValue<span class=\"token punctuation\">:</span> <span class=\"token string\">'Hello World'</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>This comes in handy when we want to provide simple configuration values.</p>\n<p><strong>Providing aliases</strong></p>\n<p>We can map an alias token to another token like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span> provide<span class=\"token punctuation\">:</span> Engine<span class=\"token punctuation\">,</span> useClass<span class=\"token punctuation\">:</span> Engine <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span> provide<span class=\"token punctuation\">:</span> <span class=\"token constant\">V8</span><span class=\"token punctuation\">,</span> useExisting<span class=\"token punctuation\">:</span> Engine <span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Providing factories</strong></p>\n<p>Yes, our beloved factories.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span> \n  provide<span class=\"token punctuation\">:</span> Engine<span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">useFactory</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">IS_V8</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">V8Engine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">V6Engine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Of course, a factory might have its own dependencies. Passing dependencies to factories is as easy as adding a list of tokens to the factory:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  provide<span class=\"token punctuation\">:</span> Engine<span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">useFactory</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">car<span class=\"token punctuation\">,</span> engine</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  deps<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>Car<span class=\"token punctuation\">,</span> Engine<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Optional Dependencies</h2>\n<p>The <code class=\"language-text\">@Optional</code> decorator lets us declare dependencies as optional. This comes in handy if, for example, our application expects a third-party library, and in case it’s not available, it can fallback.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Car</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">@<span class=\"token function\">Optional</span><span class=\"token punctuation\">(</span>jQuery<span class=\"token punctuation\">)</span> $</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>$<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// set up fallback</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>As you can see, Angular’s DI solves pretty much all issues we have with Angular 1’s DI. But there’s still one thing we haven’t talked about yet. Does the new DI still create singletons? The answer is yes.</p>\n<h2>Transient Dependencies and Child Injectors</h2>\n<p>If we need a transient dependency, something that we want a new instance every time we ask for a dependency, we have two options:</p>\n<p><strong>Factories</strong> can return instances of classes. Those won’t be singletons. Note that in the following code we’re <strong>creating</strong> a factory.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span> \n  provide<span class=\"token punctuation\">:</span> Engine<span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">useFactory</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Engine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We can create a <strong>child injector</strong> using <code class=\"language-text\">Injector.resolveAndCreateChild()</code>. A child injector introduces its own bindings and an instance of an object will be different from the parent injector’s instance.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> injector <span class=\"token operator\">=</span> ReflectiveInjector<span class=\"token punctuation\">.</span><span class=\"token function\">resolveAndCreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>Engine<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> childInjector <span class=\"token operator\">=</span> injector<span class=\"token punctuation\">.</span><span class=\"token function\">resolveAndCreateChild</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>Engine<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ninjector<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>Engine<span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> childInjector<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>Engine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Child injectors are even more interesting. It turns out that a child injector will look up a token binding on it’s parent injector if no binding for the given token is registered on the child injector. The following graphic visualises what happens:</p>\n<p><img src=\"/477bd3a6ea642886f1669072185d43e3/transient-dependencies-4.svg\" alt=\"Child injectors\"></p>\n<p>The graphic shows three injectors where two of them are child injectors. Each injector gets its own configuration of providers. Now, if we ask the second child injector for an instance of type <code class=\"language-text\">Car</code>, the car object will be created by that child injector. However, the engine will be created by the first child injector and the tires and doors will be created by the outer most parent injector. It kind of works like a prototype chain.</p>\n<p>We can even configure the <strong>visibility</strong> of dependencies, and also until where a child injector should look things up. However, this will be covered in another <a href=\"/angular/2015/08/20/host-and-visibility-in-angular-2-dependency-injection.html\">article</a>.</p>\n<h2>New StaticInjector APIs</h2>\n<p>Since version 5.0.0, <code class=\"language-text\">ReflectiveInjector</code> has been deprecated in favour of <code class=\"language-text\">StaticInjector</code> to not depend on reflection to get hold of dependencies. We don’t really have to worry about this if we aren’t dealing with creating injectors manually (because Angular does it for us). However, if we are, for whatever reason, relying on lower level injector APIs, here’s what’s different:</p>\n<ul>\n<li>Creating injectors is done via <code class=\"language-text\">Injector.create()</code></li>\n<li>Dependencies tokens have to be listed explicitly using <code class=\"language-text\">deps</code> property</li>\n</ul>\n<p><code class=\"language-text\">StaticInjector</code> doesn’t really need to resolve tokens anymore as everything is supposed to be static and passed right to the configuration. That’s why there’s not <code class=\"language-text\">resolveAndCreate()</code>, but a <code class=\"language-text\">create()</code> method. Also, instead of importing <code class=\"language-text\">ReflectiveInjector</code>, we’re importing <code class=\"language-text\">Injector</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Injector <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@angular/core'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> injector <span class=\"token operator\">=</span> Injector<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> provide<span class=\"token punctuation\">:</span> Car<span class=\"token punctuation\">,</span> deps<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>Engine<span class=\"token punctuation\">,</span> Tires<span class=\"token punctuation\">,</span> Doors<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> provide<span class=\"token punctuation\">:</span> Engine<span class=\"token punctuation\">,</span> deps<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> provide<span class=\"token punctuation\">:</span> Tires<span class=\"token punctuation\">,</span> deps<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> provide<span class=\"token punctuation\">:</span> Doors<span class=\"token punctuation\">,</span> deps<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> car <span class=\"token operator\">=</span> injector<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>Car<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Notice in the following section we discuss how DI is used within Angular. There we don’t have to specificy <code class=\"language-text\">deps</code> explicitly as long as we’re defining providers in <code class=\"language-text\">@Component()</code> or <code class=\"language-text\">@NgModule()</code>.</p>\n<h2>How is it used in Angular then?</h2>\n<p>Now that we’ve learned how the DI in Angular works, you might wonder how it is used in the framework itself. Do we have to create injectors manually when we build Angular components? Luckily, the Angular team spent a lot of energy and time to find a nice API that hides all the injector machinery when building components in Angular.</p>\n<p>Lets take a look at the following simple Angular component.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">@<span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  selector<span class=\"token punctuation\">:</span> <span class=\"token string\">'app'</span><span class=\"token punctuation\">,</span>\n  template<span class=\"token punctuation\">:</span> <span class=\"token string\">'&lt;h1>Hello {{name}}!&lt;/h1>'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token punctuation\">{</span>\n  name <span class=\"token operator\">=</span> <span class=\"token string\">'World'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Nothing special here. If this is entirely new to you, you might want to read our article on <a href=\"/angular/2015/03/27/building-a-zippy-component-in-angular-2.html\">building a zippy</a> component in Angular. Lets say we want to extend this component by using a <code class=\"language-text\">NameService</code> that is used in the component’s constructor. Such a service could look something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">NameService</span> <span class=\"token punctuation\">{</span>\n  name <span class=\"token operator\">=</span> <span class=\"token string\">'Pascal'</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Again, nothing special here. We just create a class. Now, to make it available in our application as an injectable, we need to pass some provider configurations to our application’s injector. But how do we do that? We haven’t even created one.</p>\n<p>To boostrap an application, we define an <code class=\"language-text\">NgModule</code>. The <code class=\"language-text\">@NgModule()</code> decorator creates metadata that can include providers, just like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">@<span class=\"token function\">NgModule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  imports<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>BrowserModule<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  providers<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>NameService<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  declarations<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>App<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  bootstrap<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>App<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppModule</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>That’s it. Now, to actually inject it, we just use the tools we’ve already learned about - <code class=\"language-text\">@Inject</code> decorators.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">@<span class=\"token function\">Inject</span><span class=\"token punctuation\">(</span>NameService<span class=\"token punctuation\">)</span> NameService</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> NameService<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Or, if we prefer TypeScript, we can just add type annotations to our constructor:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">NameService<span class=\"token punctuation\">:</span> NameService</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> NameService<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Awesome! All of a sudden, we don’t have any Angular machinery at all anymore. But there’s one last thing: What if we want a different binding configuration in a specific component?</p>\n<p>Lets say we have <code class=\"language-text\">NameService</code> as application wide injectable for the type <code class=\"language-text\">NameService</code>, but one particular component should get a different one? This is where the <code class=\"language-text\">@Component</code> decorators’ <code class=\"language-text\">providers</code> property comes in. It allows us to add providers to a specific component (and its child components).</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">@<span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  selector<span class=\"token punctuation\">:</span> <span class=\"token string\">'app'</span><span class=\"token punctuation\">,</span>\n  providers<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span> provide<span class=\"token punctuation\">:</span> NameService<span class=\"token punctuation\">,</span> useValue<span class=\"token punctuation\">:</span> <span class=\"token string\">'Thomas'</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  template<span class=\"token punctuation\">:</span> <span class=\"token string\">'&lt;h1>Hello {{name}}!&lt;/h1>'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>To make things clear: <code class=\"language-text\">providers</code> doesn’t configure the instances that will be injected. It configures a child injector that is created for that component. As mentioned earlier, we can also configure the visibility of our bindings, to be even more specific which component can inject what. E.g. the <code class=\"language-text\">viewProviders</code> property allows to make dependencies only available to a component’s view, but not its children. <s>We’re going to cover that in another article.</s> Dependency injection host and visibility are covered in <a href=\"/angular/2015/08/20/host-and-visibility-in-angular-2-dependency-injection.html\">this article</a>.</p>\n<h2>Conclusion</h2>\n<p>The new dependency injection system in Angular solves all the problems that we have with the current DI in Angular 1. No name collisions anymore. It’s an isolated component of the framework that can be used as standalone system, without Angular itself.</p>\n<p>I gave a talk about that topic at <a href=\"http://jsconfbp.com\">JSConf Budapest 2015</a>, <s>you can find the slides <a href=\"http://pascalprecht.github.io/slides/dependency-injection-for-future-generations/\">here</a></s>. An updated version of the slide deck is <a href=\"http://pascalprecht.github.io/slides/di-in-angular-2/#/\">here</a>. I would like to thank <a href=\"http://twitter.com/iammerrick\">Merrick</a> for letting me use some ideas of his talk at ng-vegas, and <a href=\"http://twitter.com/vojtajina\">Vojta</a> who built the original version of the new dependency injection system for Angular.</p>\n<p>Check out the demos below!</p>","frontmatter":{"author":"pascal_precht","title":"Dependency Injection in Angular","imageUrl":null,"date":"18 May 2015","summary":"Angular implements a very powerful dependency injection system that makes reusing services easy and flexible. Learn how it works!","categories":["angular"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/angular/2015/05/18/dependency-injection-in-angular-2.html","previous":{"fields":{"slug":"/announcements/2015/05/11/sponsoring-angularconnect.html"},"frontmatter":{"date":"2015/05/11","title":"Sponsoring AngularConnect","categories":["announcements"]}},"next":{"fields":{"slug":"/2015-06-06-ng-messages-revisited/"},"frontmatter":{"date":"2015/06/06","title":"ngMessages revisited","categories":null}}}}}