{"componentChunkName":"component---src-templates-blog-post-js","path":"/angular/2015/05/09/writing-angular-2-code-in-es5.html","webpackCompilationHash":"0c5d630095500f933ccd","result":{"data":{"site":{"siteMetadata":{"title":"Articles by thoughtram","authors":[{"id":"pascal_precht","name":"Pascal Precht","twitter":"PascalPrecht","img":"https://avatars2.githubusercontent.com/u/445106?s=460&v=4"},{"id":"christoph_burgdorf","name":"Christoph Burgdorf","twitter":"cburgdorf","img":"https://avatars0.githubusercontent.com/u/521109?s=460&v=4"},{"id":"dominic_elm","name":"Dominic Elm","twitter":"d3lm","img":"https://avatars0.githubusercontent.com/u/12571019?s=400&v=4"},{"id":"thomas_burleson","name":"Thomas Burleson","twitter":"thomasburleson","img":"https://avatars3.githubusercontent.com/u/210413?s=400&v=4"},{"id":"elvira_eulitz","name":"Elvira Eulitz","twitter":"ElviraEulitz","img":"https://avatars3.githubusercontent.com/u/29247040?s=400&v=4"},{"id":"maxim_koretskyi","name":"Maxim Koretskyi","twitter":"maxim_koretskyi","img":"https://avatars3.githubusercontent.com/u/6124091?s=400&v=4"}]}},"markdownRemark":{"id":"e2010871-1fbf-569d-a66e-89a06f97afc5","excerpt":"It’s no news anymore that Angular 2.x was written in TypeScript in order to take advantage of language features like types and meta data annotations through…","html":"<p>It’s no news anymore that Angular 2.x was written in TypeScript in order to take advantage of language features like types and meta data annotations through decorators. Taking a first look at Angular examples that are written in TypeScript, can feel a bit unfamiliar and unclear to developers that don’t have experience with that language. Even constructs like classes that ECMAScript 2015 brings to the table can be scary enough to keep developers from learning Angular.</p>\n<p>That’s why developers with more experience will tell us that we don’t have to write TypeScript or just ES6 if we don’t want to. We can just stick with ES5. Cool, fine. But how do we do that? In one of our last articles we’ve explored the <a href=\"/angular/2015/05/03/the-difference-between-annotations-and-decorators.html\">difference between annotations and decorators</a> and to what they translate to in ES5.</p>\n<p>In this article, we will use that information, to actually write Angular code in ES5 with the latest version released at the time of writing (2.x).</p>\n<h2>Getting started with Angular in ES5</h2>\n<p>If you’ve read our article on <a href=\"/angular/2015/03/27/building-a-zippy-component-in-angular-2.html\">building a zippy component</a> in Angular, you might know that nowadays, there’s quite a bit of work to do, in order to get started if you want to write your application in ES6/TypeScript and take advantage of it’s module system.</p>\n<p>In ES5 we don’t have a module system yet. So ideally, we should be able to just take a JavaScript file from somewhere, that has all the Angular code in it, so we can embed it in our website. We don’t have to care about transpiling, concatenating, deciding on a module system (AMD, Common, System, …), or anything else. We can just fetch a bundled file that comes with the ready-to-use code.</p>\n<p>The easiest way to get hold of Angular ES5 bundles is npmcdn. Here’s what we need to embed to get started with ES5 and Angular:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>https://npmcdn.com/@angular/core@2.0.0-rc.5/bundles/core.umd.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>https://npmcdn.com/@angular/common@2.0.0-rc.5/bundles/common.umd.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>https://npmcdn.com/@angular/compiler@2.0.0-rc.5/bundles/compiler.umd.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>https://npmcdn.com/@angular/platform-browser@2.0.0-rc.5/bundles/platform-browser.umd.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>https://npmcdn.com/@angular/platform-browser-dynamic@2.0.0-rc.5/bundles/platform-browser-dynamic.umd.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Whereas <code class=\"language-text\">@2.0.0-rc.5</code> is the version number we specify. So that part might change depending on what we want to do.</p>\n<p>Now the next question comes up: How can we access and use given annotations and/or decorators? Usually, in ES2015, we would import them from the framework but now there’s no way for us to import them.</p>\n<p>Well, it turns out that the bundled version exposes an <code class=\"language-text\">ng.core</code> object on the current global scope or reuses an existing one, which has all annotations added to it. In our <a href=\"http://blog.thoughtram.io/angular/2015/05/03/the-difference-between-annotations-and-decorators.html\">last article</a> we’ve learned that annotations are just classes, which in the end are just functions. And those functions are called as constructor functions to add meta data to our components. That means, all we have to do is to call those annotation constructors manually and assign them to our component’s <code class=\"language-text\">annotations</code> property.</p>\n<p>Let’s start off with a simple component that has a template:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">HelloComponent</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nHelloComponent<span class=\"token punctuation\">.</span>annotations <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">ng<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    selector<span class=\"token punctuation\">:</span> <span class=\"token string\">'hello-cmp'</span><span class=\"token punctuation\">,</span>\n    template<span class=\"token punctuation\">:</span> <span class=\"token string\">'Hello World!'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>That’s it. We have a constructor function that has a component annotation and a view annotation. The TypeScript equivalent would look something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">@<span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  selector<span class=\"token punctuation\">:</span> <span class=\"token string\">'hello-cmp'</span><span class=\"token punctuation\">,</span>\n  template<span class=\"token punctuation\">:</span> <span class=\"token string\">'Hello World!'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloComponent</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Bootstrapping an Angular app in ES5</h2>\n<p>When we come to the point that we want to bootstrap our application, we need to define an <code class=\"language-text\">NgModule</code> that has everything attached to it that is needed to make our app run, and bootstrap it on a dedicated platform (e.g. browser, webworker or server).</p>\n<p>Let’s go ahead and create such a module first. <code class=\"language-text\">ng.core.NgModule</code> can be used to create the needed metadata on a constructor function. Just like with our <code class=\"language-text\">HelloComponent</code>, we create an <code class=\"language-text\">AppModule</code> function like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">AppModule</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Next, we add <code class=\"language-text\">NgModule</code> annotations to it:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">AppModule<span class=\"token punctuation\">.</span>annotations <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">ng<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>NgModule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    imports<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>ng<span class=\"token punctuation\">.</span>platformBrowser<span class=\"token punctuation\">.</span>BrowserModule<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    declarations<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>HelloComponent<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    bootstrap<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>HelloComponent<span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Similar to TypeScript world, we have to import the <code class=\"language-text\">BrowserModule</code> from the <code class=\"language-text\">ng.platformBrowser</code> package, so we can bootstrap our module in the browser environment. Next, we declare all directives and components that are used inside this module, which in our case, is only the <code class=\"language-text\">HelloComponent</code>. Last but not least, we tell Angular which component to bootstrap when the module is bootstrapped.</p>\n<p>We need to make sure that all of the DOM is loaded before we bootstrap our module. Adding an event listener for the <code class=\"language-text\">DOMContentLoaded</code> event and call <code class=\"language-text\">bootstrap</code> once triggered, will help here. When the event is fired, we can call <code class=\"language-text\">platformBrowserDynamic().bootstrapModule(AppModule)</code> to bootstrap our app:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">document<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'DOMContentLoaded'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  ng<span class=\"token punctuation\">.</span>platformBrowserDynamic\n    <span class=\"token punctuation\">.</span><span class=\"token function\">platformBrowserDynamic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">bootstrapModule</span><span class=\"token punctuation\">(</span>AppModule<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>And of course, the corresponding application template looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>hello-component</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>hello-component</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Great we’ve just bootstrapped our Angular application written in ES5! Was it that hard?</p>\n<h2>Injecting services in ES5</h2>\n<p>Let’s say we want to add a <code class=\"language-text\">GreetingService</code> to our component. The <code class=\"language-text\">@Component</code> annotation takes a property <code class=\"language-text\">viewProviders</code> to define injectable types for this particular component. This is easy to add. First we build the service. A service in Angular can be just a class, which translates to just a function, which is also just an object in JavaScript.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">GreetingService</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">GreetingService</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">greeting</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">'Hello'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Next we tell our component about it’s injectable types:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">HelloComponent<span class=\"token punctuation\">.</span>annotations <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">ng<span class=\"token punctuation\">.</span>Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    selector<span class=\"token punctuation\">:</span> <span class=\"token string\">'hello-cmp'</span><span class=\"token punctuation\">,</span>\n    providers<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>GreetingService<span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This basically tells our component that it should return an instance of <code class=\"language-text\">GreetingService</code> when somebody asks for <code class=\"language-text\">GreetingService</code>. Nobody asked for it yet, so let’s change that. First we need something we want to inject into our component’s constructor:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">HelloComponent</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">greetingService</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>greeting <span class=\"token operator\">=</span> greetingService<span class=\"token punctuation\">.</span><span class=\"token function\">greeting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>To make our component explicitly ask for something that is a <code class=\"language-text\">GreetingService</code>, or in other words, to tell the injector that our <code class=\"language-text\">greetingService</code> parameter should be an instance of <code class=\"language-text\">GreetingService</code>, we need to add a parameter annotation accordingly:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">HelloComponent<span class=\"token punctuation\">.</span>parameters <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ng<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>Inject</span><span class=\"token punctuation\">(</span>GreetingService<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>If you wonder why we define a nested array, this is because one constructor parameter can have more than one associated annotation.</p>\n<p>Cool, so it turns out that writing Angular code is actually not weird at all. In addition to that, it kind of gets clear that writing Angular code in ES5 requires more typing. But again, in the end it’s up to the application author which language or transpiler to use.</p>\n<p>There’s even a <a href=\"/angular/2015/07/06/even-better-es5-code-for-angular-2.html\">better syntax</a>, that makes writing and reading Angular code a breeze.</p>\n<p>Check out the demos below!</p>","frontmatter":{"author":"pascal_precht","title":"Writing Angular code in ES5","imageUrl":null,"date":"09 May 2015","summary":"Ever wondered what it's like to write Angular 2 in ES5? Check out this article!","categories":["angular"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/angular/2015/05/09/writing-angular-2-code-in-es5.html","previous":{"fields":{"slug":"/announcements/2015/05/08/speaking-at-code-talks.html"},"frontmatter":{"date":"2015/05/08","title":"Speaking at code.talks","categories":["announcements"]}},"next":{"fields":{"slug":"/rust/2015/05/11/rusts-ownership-model-for-javascript-developers.html"},"frontmatter":{"date":"2015/05/11","title":"Rust's Ownership model for JavaScript developers","categories":["rust"]}}}}}