{"componentChunkName":"component---src-templates-blog-post-js","path":"/angular/2015/09/17/resolve-service-dependencies-in-angular-2.html","webpackCompilationHash":"0c5d630095500f933ccd","result":{"data":{"site":{"siteMetadata":{"title":"Articles by thoughtram","authors":[{"id":"pascal_precht","name":"Pascal Precht","twitter":"PascalPrecht","img":"https://avatars2.githubusercontent.com/u/445106?s=460&v=4"},{"id":"christoph_burgdorf","name":"Christoph Burgdorf","twitter":"cburgdorf","img":"https://avatars0.githubusercontent.com/u/521109?s=460&v=4"},{"id":"dominic_elm","name":"Dominic Elm","twitter":"d3lm","img":"https://avatars0.githubusercontent.com/u/12571019?s=400&v=4"},{"id":"thomas_burleson","name":"Thomas Burleson","twitter":"thomasburleson","img":"https://avatars3.githubusercontent.com/u/210413?s=400&v=4"},{"id":"elvira_eulitz","name":"Elvira Eulitz","twitter":"ElviraEulitz","img":"https://avatars3.githubusercontent.com/u/29247040?s=400&v=4"},{"id":"maxim_koretskyi","name":"Maxim Koretskyi","twitter":"maxim_koretskyi","img":"https://avatars3.githubusercontent.com/u/6124091?s=400&v=4"}]}},"markdownRemark":{"id":"1743df1e-3067-5f0c-abc6-62792799156b","excerpt":"If you’re following our articles on Dependency Injection in Angular, you know how the DI system in Angular works. It takes advantage of metadata on our code…","html":"<p>If you’re following our articles on <a href=\"/angular/2015/05/18/dependency-injection-in-angular-2.html\">Dependency Injection in Angular</a>, you know how the DI system in Angular works. It takes advantage of metadata on our code, added through annotations, to get all the information it needs so it can resolve dependencies for us.</p>\n<p>Angular applications can basically be written in any language, as long as it compiles to JavaScript in some way. When writing our application in TypeScript, we use decorators to add metadata to our code. Sometimes, we can even omit some decorators and simply rely on type annotations. However, it turns out that, when it comes to DI, we might run into unexpected behaviour when injecting dependencies into services.</p>\n<p>This article discusses what this unexpected problem is, why it exists and how it can be solved.</p>\n<h2>Injecting Service Dependencies</h2>\n<p>Let’s say we have a simple Angular component which has a <code class=\"language-text\">DataService</code> dependency. It could look something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">@<span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  selector<span class=\"token punctuation\">:</span> <span class=\"token string\">'my-app'</span><span class=\"token punctuation\">,</span>\n  template<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n    &lt;ul>\n      &lt;li *ngFor=\"let item of items\">{{item.name}}&lt;/li>\n    &lt;/ul>\n  </span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">AppComponent</span> <span class=\"token punctuation\">{</span>\n  items<span class=\"token punctuation\">:</span>Array<span class=\"token operator\">&lt;</span>any<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">dataService<span class=\"token punctuation\">:</span> DataService</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>items <span class=\"token operator\">=</span> dataService<span class=\"token punctuation\">.</span><span class=\"token function\">getItems</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">DataService</code> on the other hand is a simple class (because that’s what a service in Angular is), that provides a method to return some items.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">DataService</span> <span class=\"token punctuation\">{</span>\n  items<span class=\"token punctuation\">:</span>Array<span class=\"token operator\">&lt;</span>any<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>items <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'Christoph Burgdorf'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'Pascal Precht'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'thoughtram'</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">getItems</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Of course, in order to actually be able to ask for something of type <code class=\"language-text\">DataService</code>, we have to add a provider for our injector. We can do that by adding a provider to  our component.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">@<span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  selector<span class=\"token punctuation\">:</span> <span class=\"token string\">'my-app'</span><span class=\"token punctuation\">,</span>\n  template<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n    &lt;ul>\n      &lt;li *ngFor=\"let item of items\">{{item.name}}&lt;/li>\n    &lt;/ul>\n  </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n  providers<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>DataService<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">...</span></code></pre></div>\n<p>Until now there’s nothing new here. If this <em>is</em> new to you, you might want to read our article on <a href=\"/angular/2015/05/18/dependency-injection-in-angular-2.html\">Dependency Injection in Angular</a> first.</p>\n<p>So where is the problem? Well, the problem occurs as soon as we try to inject a dependency into our service. We could for example use <code class=\"language-text\">Http</code> in our <code class=\"language-text\">DataService</code> to fetch our data from a remote server. Let’s quickly do that. First, we need  to import Angular’s <code class=\"language-text\">HttpModule</code> into our application module.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> NgModule <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@angular/core'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> BrowserModule <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@angular/platform-browser'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> HttpModule <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@angular/http'</span><span class=\"token punctuation\">;</span>\n\n@<span class=\"token function\">NgModule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  imports<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>BrowserModule<span class=\"token punctuation\">,</span> HttpModule<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  declarations<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>AppComponent<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  bootstrap<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>AppComponent<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppModule</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>Angular’s http module comes with all the providers we need to hook up some http action in our service. Next, we need to inject an instance of <code class=\"language-text\">Http</code> in our service to actually use it.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Http <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@angular/http'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">DataService</span> <span class=\"token punctuation\">{</span>\n  items<span class=\"token punctuation\">:</span>Array<span class=\"token operator\">&lt;</span>any<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">http<span class=\"token punctuation\">:</span>Http</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Boom</strong>. This thing is going to explode. As soon as we run this code in the browser, we’ll get the following error:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Cannot resolve all parameters for DataService(?). Make sure they all have valid type or annotations.</code></pre></div>\n<p>It basically says that it can’t resolve the <code class=\"language-text\">Http</code> dependency of <code class=\"language-text\">DataService</code> because Angular doesn’t know the type and therefore, no provider that can be used to resolve the dependency. Uhm.. wait what? Didn’t we put the type in the constructor?</p>\n<p>Yea, we did. Unfortunately it turns out this is not enough. However, obviously it <strong>does</strong> work when we inject <code class=\"language-text\">DataService</code> in our <code class=\"language-text\">AppComponent</code>. So what’s the problem here? Let’s take a step back and recap real quick where the metadata, that Angular’s DI need, comes from.</p>\n<p>In our article on <a href=\"/angular/2015/05/03/the-difference-between-annotations-and-decorators.html\">the difference between decorators and annotations</a> we learned that decorators simply add metadata to our code. If we take our <code class=\"language-text\">AppComponent</code>, once decorated and transpiled, it looks something like this (simplified):</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">AppComponent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">myService</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span>\n\nAppComponent <span class=\"token operator\">=</span> <span class=\"token function\">__decorate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">__metadata</span><span class=\"token punctuation\">(</span><span class=\"token string\">'design:paramtypes'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>DataService<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> AppComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>We can clearly see that <code class=\"language-text\">AppComponent</code> is decorated with <code class=\"language-text\">Component</code>, and some additional metadata for <code class=\"language-text\">paramtypes</code>. The <code class=\"language-text\">paramtypes</code> metadata is the one that is needed by Angular’s DI to figure out, for what type it has to return an instance.</p>\n<p>This looks good. Let’s take a look at the transpiled <code class=\"language-text\">DataService</code> and see what’s going on there (also simplified).</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">DataService <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">DataService</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">http</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> DataService<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Oops. Apparently we don’t have any metadata at all here. Why is that?</p>\n<p>TypeScript generates metadata when the <code class=\"language-text\">emitDecoratorMetadata</code> option is set. However, that doesn’t mean that it generates metadata blindly for each and every class or method of our code. TypeScript only generates metadata for a class, method, property or method/constructor parameter when a decorator is actually attached to that particular code. Otherwise, a huge amount of unused metadata code would be generated, which not only affects file size, but it’d also have an impact on our application runtime.</p>\n<p>That’s also why the metadata is generated for <code class=\"language-text\">AppComponent</code>, but not for <code class=\"language-text\">DataService</code>. Our <code class=\"language-text\">AppComponent</code> <strong>does</strong> have decorators, otherwhise it’s not a component.</p>\n<h2>Enforcing Metadata Generation</h2>\n<p>So how can we enforce TypeScript to emit metadata for us accordingly? One thing we could do, is to use DI decorators provided by the framework. As we learned in our other articles on DI, the <code class=\"language-text\">@Inject</code> decorator is used to ask for a dependency of a certain type. </p>\n<p>We could change our <code class=\"language-text\">DataService</code> to something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Inject <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@angular/core'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Http <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@angular/http'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">DataService</span> <span class=\"token punctuation\">{</span>\n  items<span class=\"token punctuation\">:</span>Array<span class=\"token operator\">&lt;</span>any<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">@<span class=\"token function\">Inject</span><span class=\"token punctuation\">(</span>Http<span class=\"token punctuation\">)</span> http<span class=\"token punctuation\">:</span>Http</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Problem solved</strong>. In fact, this is exactly what <code class=\"language-text\">@Inject</code> is for when not transpiling with TypeScript. If we take a look at the transpiled code now, we see that all the needed metadata is generated (yeap simplified).</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">DataService</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">http</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\nDataService <span class=\"token operator\">=</span> <span class=\"token function\">__decorate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token function\">__param</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> angular2_1<span class=\"token punctuation\">.</span><span class=\"token function\">Inject</span><span class=\"token punctuation\">(</span>Http<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n  <span class=\"token function\">__metadata</span><span class=\"token punctuation\">(</span><span class=\"token string\">'design:paramtypes'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>Http<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> DataService<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>However, now we have this Angular machinery in our code and unfortunately, we won’t entirely get rid of it. We can do a little bit better though. Remember that we said metadata is generated, if decorators are attached to our code?</p>\n<p>We can basically put <strong>any</strong> decorator on our code, as long as it’s either attached to the class declaration, or to the constructor parameter. In other words, we could remove <code class=\"language-text\">@Inject</code> again and use something else that we put on the class, because that will cause TypeScript to emit metadata for the constructor parameters too.</p>\n<p>Of course, putting just anything that is a decorator on a class doesn’t sound really appropiate. Luckily, Angular comes with yet another decorator we can use. <code class=\"language-text\">@Injectable</code> is normally used for Dart metadata generation. It doesn’t have any special meaning in TypeScript-land, however, it turns out to be a perfect fit for our use case. We don’t have to build a new one ourselves, and the name also kind of makes sense.</p>\n<p>All we have to do is to import it and put it on our <code class=\"language-text\">DataService</code> like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Injectable <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@angular/core'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Http <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@angular/http'</span><span class=\"token punctuation\">;</span>\n\n@<span class=\"token function\">Injectable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">DataService</span> <span class=\"token punctuation\">{</span>\n  items<span class=\"token punctuation\">:</span>Array<span class=\"token operator\">&lt;</span>any<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">http<span class=\"token punctuation\">:</span>Http</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Again, this will just enforce TypeScript to emit the needed metadata, the decorator itself doesn’t have any special meaning here. This seems to be currently the best option we have to solve the illustrated problem.</p>","frontmatter":{"author":"pascal_precht","title":"Understanding @Injectable in Angular","imageUrl":null,"date":"17 September 2015","summary":"We might run into unexpected behaviour when injecting service dependencies. This article details how to do it right.","categories":["angular"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/angular/2015/09/17/resolve-service-dependencies-in-angular-2.html","previous":{"fields":{"slug":"/announcements/2015/09/14/angular-training-day-bangkok.html"},"frontmatter":{"date":"2015/09/14","title":"Angular Training Day Bangkok","categories":["announcements"]}},"next":{"fields":{"slug":"/announcements/2015/10/08/pascal-becomes-a-gde.html"},"frontmatter":{"date":"2015/10/08","title":"Pascal becomes a GDE","categories":["announcements"]}}}}}