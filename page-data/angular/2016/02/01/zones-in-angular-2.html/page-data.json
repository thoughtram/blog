{"componentChunkName":"component---src-templates-blog-post-js","path":"/angular/2016/02/01/zones-in-angular-2.html","webpackCompilationHash":"0c5d630095500f933ccd","result":{"data":{"site":{"siteMetadata":{"title":"Articles by thoughtram","authors":[{"id":"pascal_precht","name":"Pascal Precht","twitter":"PascalPrecht","img":"https://avatars2.githubusercontent.com/u/445106?s=460&v=4"},{"id":"christoph_burgdorf","name":"Christoph Burgdorf","twitter":"cburgdorf","img":"https://avatars0.githubusercontent.com/u/521109?s=460&v=4"},{"id":"dominic_elm","name":"Dominic Elm","twitter":"d3lm","img":"https://avatars0.githubusercontent.com/u/12571019?s=400&v=4"},{"id":"thomas_burleson","name":"Thomas Burleson","twitter":"thomasburleson","img":"https://avatars3.githubusercontent.com/u/210413?s=400&v=4"},{"id":"elvira_eulitz","name":"Elvira Eulitz","twitter":"ElviraEulitz","img":"https://avatars3.githubusercontent.com/u/29247040?s=400&v=4"},{"id":"maxim_koretskyi","name":"Maxim Koretskyi","twitter":"maxim_koretskyi","img":"https://avatars3.githubusercontent.com/u/6124091?s=400&v=4"}]}},"markdownRemark":{"id":"7657274c-a869-5c3a-8dbb-5bdcc01f38ad","excerpt":"In Understanding Zones, we explored the power of Zones by building a profiling zone that profiles asynchronous operations in our code. We learned that Zones are…","html":"<p>In <a href=\"/angular/2016/01/22/understanding-zones.html\">Understanding Zones</a>, we explored the power of Zones by building a profiling zone that profiles asynchronous operations in our code. We learned that Zones are a sort of execution context that allows us to hook into our asynchronous tasks. If you haven’t read that article, we highly recommend checking it out as this one is based on it. In this article we’re going to take a closer look at what role Zones play in Angular.</p>\n<p><strong>UPDATE:</strong> We’ve published another article that discusses how to <a href=\"/angular/2017/02/21/using-zones-in-angular-for-better-performance.html\">use Zones to make your Angular apps faster</a></p>\n<h2>Zones are a perfect fit for Angular</h2>\n<p>It turns out that, the problem that Zones solve, plays very nicely with what Angular needs in order to perform change detection in our applications. Did you ever ask yourself when and why Angular performs change detection? What is it that tells Angular “Dude, a change probably occurred in my application. Can you please check?“.</p>\n<p>Before we dive into these questions, let’s first think about what actually causes this change in our applications. Or rather, what <strong>can</strong> change state in our applications. Application state change is caused by three things:</p>\n<ul>\n<li><strong>Events</strong> - User events like <code class=\"language-text\">click</code>, <code class=\"language-text\">change</code>, <code class=\"language-text\">input</code>, <code class=\"language-text\">submit</code>, …</li>\n<li><strong>XMLHttpRequests</strong> - E.g. when fetching data from a remote service</li>\n<li><strong>Timers</strong> - <code class=\"language-text\">setTimeout()</code>, <code class=\"language-text\">setInterval()</code>, because JavaScript</li>\n</ul>\n<p>It turns out that these three things have something in common. Can you name it? … Correct! <strong>They are all asynchronous</strong>.</p>\n<p>Why do you think is this important? Well … because it turns out that these are the only cases when Angular is actually interested in updating the view. Let’s say we have an Angular component that executes a handler when a button is clicked:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">@<span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  selector<span class=\"token punctuation\">:</span> <span class=\"token string\">'my-component'</span><span class=\"token punctuation\">,</span>\n  template<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n    &lt;h3>We love {{name}}&lt;/h3>\n    &lt;button (click)=\"changeName()\">Change name&lt;/button>\n  </span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token punctuation\">{</span>\n\n  name<span class=\"token punctuation\">:</span>string <span class=\"token operator\">=</span> <span class=\"token string\">'thoughtram'</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">changeName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'Angular'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If you’re not familiar with the <code class=\"language-text\">(click)</code> syntax, you might want to read our article on <a href=\"/angular/2015/08/11/angular-2-template-syntax-demystified-part-1.html\">Angular’s Template Syntax Demystified</a>. The short version is, that this sets up an event handler for the <code class=\"language-text\">click</code> event on the <code class=\"language-text\">&lt;button&gt;</code> element.</p>\n<p>When the component’s button is clicked, <code class=\"language-text\">changeName()</code> is executed, which in turn will change the <code class=\"language-text\">name</code> property of the component. Since we want this change to be reflected in the DOM as well, Angular is going to update the view binding <code class=\"language-text\">{% raw %}{{name}}{% endraw %}</code> accordingly. Nice, that seems to magically work.</p>\n<p>Another example would be to update the <code class=\"language-text\">name</code> property using <code class=\"language-text\">setTimeout()</code>. Note that we removed the button.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">@<span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  selector<span class=\"token punctuation\">:</span> <span class=\"token string\">'my-component'</span><span class=\"token punctuation\">,</span>\n  template<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n    &lt;h3>We love {{name}}&lt;/h3>\n  </span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">OnInit</span> <span class=\"token punctuation\">{</span>\n\n  name<span class=\"token punctuation\">:</span>string <span class=\"token operator\">=</span> <span class=\"token string\">'thoughtram'</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">ngOnInit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'Angular'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We don’t have to do anything special to tell the framework that a change has happened. <strong>No <code class=\"language-text\">ng-click</code>, no <code class=\"language-text\">$timeout</code>, <code class=\"language-text\">$scope.$apply()</code></strong>.</p>\n<p>If you’ve read our article on <a href=\"/angular/2016/01/22/understanding-zones.html\">understanding Zones</a>, you know that this works obviously because Angular takes advantage of Zones. Zones monkey-patches global asynchronous operations such as <code class=\"language-text\">setTimeout()</code> and <code class=\"language-text\">addEventListener()</code>, which is why Angular can easily find out, when to update the DOM.</p>\n<p>In fact, the code that tells Angular to perform change detection whenever the VM turn is done, is as simple as this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">ObservableWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>zone<span class=\"token punctuation\">.</span>onTurnDone<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>zone<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">tick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">tick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// perform change detection</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>changeDetectorRefs<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">detector</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    detector<span class=\"token punctuation\">.</span><span class=\"token function\">detectChanges</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Whenever Angular’s zone emits an <code class=\"language-text\">onTurnDone</code> event, it runs a task that performs change detection for the entire application. If you’re interested in how change detection in Angular works, <s>watch out, we’re going to publish another article on that soon</s> go ahead and read <a href=\"/angular/2016/02/22/angular-2-change-detection-explained.html\">this article</a>.</p>\n<p>But wait, where does the <code class=\"language-text\">onTurnDone</code> event emitter come from? This is not part of the default <code class=\"language-text\">Zone</code> API, right? It turns out that Angular introduces its own zone called <code class=\"language-text\">NgZone</code>.</p>\n<h2>NgZone in Angular</h2>\n<p><code class=\"language-text\">NgZone</code> is basically a forked zone that extends its API and adds some additional functionality to its execution context. One of the things it adds to the API is the following set of custom events we can subscribe to, as they are observable streams:</p>\n<ul>\n<li><code class=\"language-text\">onTurnStart()</code> - Notifies subscribers just before Angular’s event turn starts. Emits an event once per browser task that is handled by Angular.</li>\n<li><code class=\"language-text\">onTurnDone()</code> - Notifies subscribers immediately after Angular’s zone is done processing the current turn and any micro tasks scheduled from that turn.</li>\n<li><code class=\"language-text\">onEventDone()</code> - Notifies subscribers immediately after the final <code class=\"language-text\">onTurnDone()</code> callback before ending VM event. Useful for testing to validate application state.</li>\n</ul>\n<p>If “Observables” and “Streams” are super new to you, you might want to read our article on <a href=\"http://blog.thoughtram.io/angular/2016/01/06/taking-advantage-of-observables-in-angular2.html\">Taking advantage of Observables in Angular</a>.</p>\n<p>The main reason Angular adds its own event emitters instead of relying on <code class=\"language-text\">beforeTask</code> and <code class=\"language-text\">afterTask</code> callbacks, is that it has to keep track of timers and other micro tasks. It’s also nice that Observables are used as an API to handle these events.</p>\n<h2>Running code outside Angular’s zone</h2>\n<p>Since <code class=\"language-text\">NgZone</code> is really just a fork of the global zone, Angular has full control over when to run something inside its zone to perform change detection and when not. Why is that useful? Well, it turns out that we don’t always want Angular to magically perform change detection.</p>\n<p>As mentioned a couple of times, Zones monkey-patches pretty much any global asynchronous operations by the browser. And since <code class=\"language-text\">NgZone</code> is just a fork of that zone which notifies the framework to perform change detection when an asynchronous operation has happened, it would also trigger change detection when things like <code class=\"language-text\">mousemove</code> events fire.</p>\n<p>We probably don’t want to perform change detection every time <code class=\"language-text\">mousemove</code> is fired as it would slow down our application and results in very bad user experience.</p>\n<p>That’s why <code class=\"language-text\">NgZone</code> comes with an API <code class=\"language-text\">runOutsideAngular()</code> which performs a given task in <code class=\"language-text\">NgZone</code>’s parent zone, which <strong>does not</strong> emit an <code class=\"language-text\">onTurnDone</code> event, hence no change detection is performed. To demonstrate this useful feature, let’s take look at the following code:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">@<span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  selector<span class=\"token punctuation\">:</span> <span class=\"token string\">'progress-bar'</span><span class=\"token punctuation\">,</span>\n  template<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n    &lt;h3>Progress: {{progress}}&lt;/h3>\n    &lt;button (click)=\"processWithinAngularZone()\">\n      Process within Angular zone\n    &lt;/button>\n  </span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ProgressBar</span> <span class=\"token punctuation\">{</span>\n\n  progress<span class=\"token punctuation\">:</span> number <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token keyword\">private</span> zone<span class=\"token punctuation\">:</span> NgZone</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">processWithinAngularZone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>progress <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">increaseProgress</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Done!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Nothing special going on here. We have component that calls <code class=\"language-text\">processWithinAngularZone()</code> when the button in the template is clicked. However, that method calls <code class=\"language-text\">increaseProgress()</code>. Let’s take a closer look at this one:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">increaseProgress</span><span class=\"token punctuation\">(</span><span class=\"token function-variable function\">doneCallback</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>progress <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Current progress: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>progress<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">%</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>progress <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    window<span class=\"token punctuation\">.</span><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">increaseProgress</span><span class=\"token punctuation\">(</span>doneCallback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">doneCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">increaseProgress()</code> calls itself every 10 milliseconds until <code class=\"language-text\">progress</code> equals <code class=\"language-text\">100</code>. Once it’s done, the given <code class=\"language-text\">doneCallback</code> will execute. Notice how we use <code class=\"language-text\">setTimeout()</code> to increase the progress.</p>\n<p>Running this code in the browser, basically demonstrates what we already know. After each <code class=\"language-text\">setTimeout()</code> call, Angular performs change detection and updates the view, which allows us to see how <code class=\"language-text\">progress</code> is increased every 10 milliseconds. It gets more interesting when we run this code outside Angular’s zone. Let’s add a method that does exactly that.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">processOutsideAngularZone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>progress <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>zone<span class=\"token punctuation\">.</span><span class=\"token function\">runOutsideAngular</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">increaseProgress</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>zone<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Outside Done!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">processOutsideAngularZone()</code> also calls <code class=\"language-text\">increaseProgress()</code> but this time using <code class=\"language-text\">runOutsideAngularZone()</code> which causes Angular not to be notified after each timeout. We access Angular’s zone by injecting it into our component using the <code class=\"language-text\">NgZone</code> token.</p>\n<p>The UI is not updated as <code class=\"language-text\">progress</code> increases. However, once <code class=\"language-text\">increaseProgress()</code> is done, we run another task inside Angular’s zone again using <code class=\"language-text\">zone.run()</code> which in turn causes Angular to perform change detection which will update the view. In other words, instead of seeing <code class=\"language-text\">progress</code> increasing, all we see is the final value once it’s done. Check out the running code in action below.</p>\n<p>Zones have now also been proposed as a standard at TC39, maybe another reason to take a closer look at them.</p>","frontmatter":{"author":"pascal_precht","title":"Zones in Angular","imageUrl":null,"date":"01 February 2016","summary":"In this article we're going to discuss what role Zones play in the Angular platform, with the Angular specific NgZone.","categories":["angular"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/angular/2016/02/01/zones-in-angular-2.html","previous":{"fields":{"slug":"/angular/2016/01/22/understanding-zones.html"},"frontmatter":{"date":"2016/01/22","title":"Understanding Zones","categories":["angular"]}},"next":{"fields":{"slug":"/announcements/2016/02/10/sponsoring-angularconnect-again.html"},"frontmatter":{"date":"2016/02/10","title":"Sponsoring AngularConnect. Again.","categories":["announcements"]}}}}}