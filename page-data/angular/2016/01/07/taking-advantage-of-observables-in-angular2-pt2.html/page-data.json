{"componentChunkName":"component---src-templates-blog-post-js","path":"/angular/2016/01/07/taking-advantage-of-observables-in-angular2-pt2.html","webpackCompilationHash":"0c5d630095500f933ccd","result":{"data":{"site":{"siteMetadata":{"title":"Articles by thoughtram","authors":[{"id":"pascal_precht","name":"Pascal Precht","twitter":"PascalPrecht","img":"https://avatars2.githubusercontent.com/u/445106?s=460&v=4"},{"id":"christoph_burgdorf","name":"Christoph Burgdorf","twitter":"cburgdorf","img":"https://avatars0.githubusercontent.com/u/521109?s=460&v=4"},{"id":"dominic_elm","name":"Dominic Elm","twitter":"d3lm","img":"https://avatars0.githubusercontent.com/u/12571019?s=400&v=4"},{"id":"thomas_burleson","name":"Thomas Burleson","twitter":"thomasburleson","img":"https://avatars3.githubusercontent.com/u/210413?s=400&v=4"},{"id":"elvira_eulitz","name":"Elvira Eulitz","twitter":"ElviraEulitz","img":"https://avatars3.githubusercontent.com/u/29247040?s=400&v=4"},{"id":"maxim_koretskyi","name":"Maxim Koretskyi","twitter":"maxim_koretskyi","img":"https://avatars3.githubusercontent.com/u/6124091?s=400&v=4"}]}},"markdownRemark":{"id":"64f55e20-dd97-5921-b26a-93a0020899b2","excerpt":"In a previous post we showed how to leverage Observables, and especially their strength of composability to ease complicated async tasks. Today we want to takeâ€¦","html":"<p>In a <a href=\"/angular/2016/01/06/taking-advantage-of-observables-in-angular2.html\">previous post</a> we showed how to leverage Observables, and especially their strength of composability to ease complicated async tasks. Today we want to take it one step further.</p>\n<p>As a recap, we built a simple Wikipedia search demo consisting of a <code class=\"language-text\">WikipediaService</code> to query a JSONP API.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Injectable <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@angular/core'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> URLSearchParams<span class=\"token punctuation\">,</span> Jsonp <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@angular/http'</span><span class=\"token punctuation\">;</span>\n\n@<span class=\"token function\">Injectable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">WikipediaService</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token keyword\">private</span> jsonp<span class=\"token punctuation\">:</span> Jsonp</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">search</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">term<span class=\"token punctuation\">:</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> search <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URLSearchParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    search<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'action'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'opensearch'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    search<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'search'</span><span class=\"token punctuation\">,</span> term<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    search<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'format'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'json'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>jsonp\n                <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://en.wikipedia.org/w/api.php?callback=JSONP_CALLBACK'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> search <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We also built an <code class=\"language-text\">App</code> component that uses this service and applies some Rx gymnastics to tame the user input, prevent duplicate requests and deal with out-of-order responses.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">@<span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  selector<span class=\"token punctuation\">:</span> <span class=\"token string\">'my-app'</span><span class=\"token punctuation\">,</span>\n  template<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n    &lt;div>\n      &lt;h2>Wikipedia Search&lt;/h2>\n      &lt;input type=\"text\" [formControl]=\"term\"/>\n      &lt;ul>\n        &lt;li *ngFor=\"let item of items | async\">{{item}}&lt;/li>\n      &lt;/ul>\n    &lt;/div>\n  </span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">OnInit</span> <span class=\"token punctuation\">{</span>\n\n  items<span class=\"token punctuation\">:</span> Observable<span class=\"token operator\">&lt;</span>Array<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">>></span><span class=\"token punctuation\">;</span>\n  term <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FormControl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token keyword\">private</span> wikipediaService<span class=\"token punctuation\">:</span> WikipediaService</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">ngOnInit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>items <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>term<span class=\"token punctuation\">.</span>valueChanges\n                 <span class=\"token punctuation\">.</span><span class=\"token function\">debounceTime</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span>\n                 <span class=\"token punctuation\">.</span><span class=\"token function\">distinctUntilChanged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                 <span class=\"token punctuation\">.</span><span class=\"token function\">switchMap</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">term</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>wikipediaService<span class=\"token punctuation\">.</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span>term<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Thinking ahead we can refactor our code even further and let our API design leverage from the power of Observables.</p>\n<h2>Observables = Promises + Events (in a way!)</h2>\n<p>In a way Observables may be seen as the clever child of Events and Promises. Promises are first class objects that encapsulate the state of an asynchronous operation. But they are for singular operations only. A request is such an operation. You invoke a method, kicking off some async task and get a first class object that eventually will get you to the result of the operation (ignoring error handling for now).</p>\n<p>Events on the other hand are for async operations that can continue to emit new values for an infinite duration. But Unfortunately they are traditionally not represented in a format that matches the criteria of a first class object. You canâ€™t just pass an event of clicks around that skips every third click for instance.</p>\n<p>Well, with Observables you can. You get the power of first class objects but without the limitations of singularity.</p>\n<p>In fact, in a modern .NET language such as F#, which embraces Observables all the way down, every <code class=\"language-text\">IEvent&lt;T&gt;</code> inherits from <code class=\"language-text\">IObservable&lt;T&gt;</code>. Angular also went down this path and made <code class=\"language-text\">EventEmiter&lt;T&gt;</code> implement <code class=\"language-text\">Observable&lt;T&gt;</code>.</p>\n<h2>Smart service, dumb component</h2>\n<p>With that in mind: wouldnâ€™t it be actually nice if we could save the component from dealing with all these edge cases? What if we just make the debounce duration configureable but let the rest of the complexity be handled by our <code class=\"language-text\">WikipediaService</code>?</p>\n<p>To let code speak we can transform our <code class=\"language-text\">WikipediaService</code> into this.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">@<span class=\"token function\">Injectable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">WikipediaService</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token keyword\">private</span> jsonp<span class=\"token punctuation\">:</span> Jsonp</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">search</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">terms<span class=\"token punctuation\">:</span> Observable<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> debounceDuration <span class=\"token operator\">=</span> <span class=\"token number\">400</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> terms<span class=\"token punctuation\">.</span><span class=\"token function\">debounceTime</span><span class=\"token punctuation\">(</span>debounceDuration<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">distinctUntilChanged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">switchMap</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">term</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">rawSearch</span><span class=\"token punctuation\">(</span>term<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">rawSearch</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">term<span class=\"token punctuation\">:</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> search <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URLSearchParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    search<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'action'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'opensearch'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    search<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'search'</span><span class=\"token punctuation\">,</span> term<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    search<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'format'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'json'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>jsonp\n                <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://en.wikipedia.org/w/api.php?callback=JSONP_CALLBACK'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> search <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Notice that the service still exposes the previous api as <code class=\"language-text\">rawSearch</code> and builds a more clever <code class=\"language-text\">search</code> API on top of it.</p>\n<p>This dramatically simplifies our <code class=\"language-text\">App</code> component.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">@<span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  selector<span class=\"token punctuation\">:</span> <span class=\"token string\">'my-app'</span><span class=\"token punctuation\">,</span>\n  template<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n    &lt;div>\n      &lt;h2>Wikipedia Search&lt;/h2>\n      &lt;input type=\"text\" [formControl]=\"term\"/>\n      &lt;ul>\n        &lt;li *ngFor=\"let item of items | async\">{{item}}&lt;/li>\n      &lt;/ul>\n    &lt;/div>\n  </span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token punctuation\">{</span>\n\n  items<span class=\"token punctuation\">:</span> Observable<span class=\"token operator\">&lt;</span>Array<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">>></span><span class=\"token punctuation\">;</span>\n  term <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FormControl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token keyword\">private</span> wikipediaService<span class=\"token punctuation\">:</span> WikipediaService</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>items <span class=\"token operator\">=</span> wikipediaService<span class=\"token punctuation\">.</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>term<span class=\"token punctuation\">.</span>valueChanges<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>See what happened? We just wire together event streams like lego blocks!</p>\n<p>You can play around with the demo right here. Enjoy!</p>","frontmatter":{"author":"christoph_burgdorf","title":"Taking advantage of Observables in Angular 2 - Part 2","imageUrl":null,"date":"07 January 2016","summary":"This is a follow up article that demonstrates how Observables can influence our API design.","categories":["angular"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/angular/2016/01/07/taking-advantage-of-observables-in-angular2-pt2.html","previous":{"fields":{"slug":"/angular/2016/01/06/taking-advantage-of-observables-in-angular2.html"},"frontmatter":{"date":"2016/01/06","title":"Taking advantage of Observables in Angular","categories":["angular"]}},"next":{"fields":{"slug":"/angular/2016/01/22/understanding-zones.html"},"frontmatter":{"date":"2016/01/22","title":"Understanding Zones","categories":["angular"]}}}}}