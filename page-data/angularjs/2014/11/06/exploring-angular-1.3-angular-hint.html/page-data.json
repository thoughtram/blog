{"componentChunkName":"component---src-templates-blog-post-js","path":"/angularjs/2014/11/06/exploring-angular-1.3-angular-hint.html","webpackCompilationHash":"0c5d630095500f933ccd","result":{"data":{"site":{"siteMetadata":{"title":"Articles by thoughtram","authors":[{"id":"pascal_precht","name":"Pascal Precht","twitter":"PascalPrecht","img":"https://avatars2.githubusercontent.com/u/445106?s=460&v=4"},{"id":"christoph_burgdorf","name":"Christoph Burgdorf","twitter":"cburgdorf","img":"https://avatars0.githubusercontent.com/u/521109?s=460&v=4"},{"id":"dominic_elm","name":"Dominic Elm","twitter":"d3lm","img":"https://avatars0.githubusercontent.com/u/12571019?s=400&v=4"},{"id":"thomas_burleson","name":"Thomas Burleson","twitter":"thomasburleson","img":"https://avatars3.githubusercontent.com/u/210413?s=400&v=4"},{"id":"elvira_eulitz","name":"Elvira Eulitz","twitter":"ElviraEulitz","img":"https://avatars3.githubusercontent.com/u/29247040?s=400&v=4"},{"id":"maxim_koretskyi","name":"Maxim Koretskyi","twitter":"maxim_koretskyi","img":"https://avatars3.githubusercontent.com/u/6124091?s=400&v=4"}]}},"markdownRemark":{"id":"940bb358-2ca3-5b33-b0f4-dd9aabaed0ce","excerpt":"With the release of version 1.3, the Angular project comes with a new module called angular-hint, that makes debugging and finding mistakes in the code base…","html":"<p>With the release of version 1.3, the Angular project comes with a new module called <a href=\"http://github.com/angular/angular-hint\">angular-hint</a>, that makes debugging and finding mistakes in the code base easier. It also gives us hints about best practices, so that our code is more maintainable and easier to read. In this article we’ll take a brief look at this module and explore how we can actually use it and what great features it provides. As a side note, this is the third article of our ”<em>Exploring Angular 1.3</em>” series, so you might want to check out our articles about <a href=\"http://blog.thoughtram.io/angularjs/2014/10/19/exploring-angular-1.3-ng-model-options.html\">ngModelOptions</a> and <a href=\"http://blog.thoughtram.io/angularjs/2014/10/14/exploring-angular-1.3-one-time-bindings.html\">one-time bindings</a> too. Okay, let’s dive into the actual topic.</p>\n<p>As already mentioned, <code class=\"language-text\">angular-hint</code> helps us writing better Angular code and makes finding very common mistakes in our code base easier. For example, did it ever happen to you, that you developed your Angular app, you grabbed a module from somewhere, then you started using the directives that the module comes with, and no matter how much you followed the usage instructions, it simply didn’t work. And after one hour of debugging you found out that you forgot to add the module dependency to your application. Yikes!</p>\n<p>But let me tell you something. With <code class=\"language-text\">angular-hint</code>, these times are over. And that’s just one use case where <code class=\"language-text\">angular-hint</code> helps out. In fact, <code class=\"language-text\">angular-hint</code> comes with a couple of other sub modules for particular use cases.</p>\n<p>These modules are:</p>\n<ul>\n<li><a href=\"http://github.com/angular/angular-hint-controllers\">angular-hint-controllers</a> - Warns about use of global controllers and hints about best practices for controller naming</li>\n<li><a href=\"http://github.com/angular/angular-hint-directives\">angular-hint-directives</a> - Hints about misspelled attributes and tags, directives and more</li>\n<li><a href=\"http://github.com/angular/angular-hint-dom\">angular-hint-dom</a> - Warns about use of DOM APIs in controllers</li>\n<li><a href=\"http://github.com/angular/angular-hint-events\">angular-hint-events</a> - Identifies undefined variables in event expressions</li>\n<li><a href=\"http://github.com/angular/angular-hint-interpolation\">angular-hint-interpolation</a> - Notifies of undefined parts of interpolations chains and suggests available variables</li>\n<li><a href=\"http://github.com/angular/angular-hint-modules\">angular-hint-modules</a> - Identifies missing module namespaces, undeclared modules, multiple uses of <code class=\"language-text\">ng-app</code> and more</li>\n</ul>\n<p>Let’s start right away and see what the usage of <code class=\"language-text\">angular-hint</code> looks like.</p>\n<h2>Install and using <code class=\"language-text\">angular-hint</code></h2>\n<p>Using <code class=\"language-text\">angular-hint</code> is super easy, since all we have to do is to install it via npm, embed the source in our application and use the <code class=\"language-text\">ng-hint</code> directive that takes care of the rest. Alright, so let’s install the module via npm:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ npm install angular-hint</code></pre></div>\n<p>The <code class=\"language-text\">angular-hint</code> module declares all the sub modules (<code class=\"language-text\">angular-hint-directives</code>, <code class=\"language-text\">angular-hint-controllers</code>, …) as dependency, so you don’t have to care about installing them manually. The command above does the job for you. Also, the package comes with a pre-compiled <code class=\"language-text\">hint.js</code> file that contains the source of all mentioned <code class=\"language-text\">angular-hint-*</code> modules, so you can use it right away.</p>\n<p>Once it’s installed, we can embed the source in our application right after Angular itself like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;script type=&quot;path/to/angular/angular.js&quot;&gt;&lt;/script&gt;\n&lt;script type=&quot;path/to/angular-hint/hint.js&quot;&gt;&lt;/script&gt;</code></pre></div>\n<p>Next, we apply the <code class=\"language-text\">ng-hint</code> directive in order to actually use the <code class=\"language-text\">angular-hint</code> module:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;body ng-app=&quot;myApp&quot; ng-hint&gt;\n&lt;/body&gt;</code></pre></div>\n<p>That’s it. We’re done. It’s that easy.</p>\n<p>Applying the <code class=\"language-text\">ng-hint</code> directive to our document takes care of injecting all needed hint modules in your apps bootstrap phase. But how does <code class=\"language-text\">ng-hint</code> know, which hint modules we actually want to activate? By default, <code class=\"language-text\">ng-hint</code> injects all the mentioned hint modules. However, if we don’t want to get controller related hints, but are interested in DOM related hints, we can restrict the use of hint modules by using the <code class=\"language-text\">ng-hint-include</code> directive instead. The following code only injects <code class=\"language-text\">angular-hint-dom</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;body ng-app=&quot;myApp&quot; ng-hint-include=&quot;dom&quot;&gt;\n&lt;/body&gt;</code></pre></div>\n<p>We can even define more than just one hint module if needed:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;body ng-app=&quot;myApp&quot; ng-hint-include=&quot;dom directives&quot;&gt;\n&lt;/body&gt;</code></pre></div>\n<p>As you can see, the names used as value for <code class=\"language-text\">ng-hint-include</code> map to the suffixes of the actual hint module names. E.g. <code class=\"language-text\">dom</code> and <code class=\"language-text\">directives</code> map to <code class=\"language-text\">angular-hint-dom</code> and <code class=\"language-text\">angular-hint-directives</code> respectively.</p>\n<h2>Module hints</h2>\n<p>Okay, so now that <code class=\"language-text\">angular-hint</code> is installed, let’s try to reproduce the “I forgot to add module dependency” scenario we were talking about. To do that, we declare an additional Angular module that act as our app dependency. For simplicity’s sake, we don’t add any ground breaking functionality here.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">angular.module(&#39;myAppDependency&#39;, []);</code></pre></div>\n<p>Next we take a look at our actual app module definition. As you can see, we declare the module without any further dependencies a.k.a we simply forgot it.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">angular.module(&#39;myApp&#39;, []);</code></pre></div>\n<p>Now, instead of fiddling around for an hour to find out why <code class=\"language-text\">myAppDependency</code>’s directives aren’t picked up, <code class=\"language-text\">angular-hint</code> is telling us that we might missed something. Simply open your browsers console and you should see something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Angular Hint: Modules\n  Module &quot;myAppDependency&quot; was created but never loaded.</code></pre></div>\n<p>This log occurs whenever an Angular module is present but not declared as dependency anywhere (You might see another message says that <code class=\"language-text\">ngHintModules</code> was also created but never loaded. This is a probably a bug and filed <a href=\"https://github.com/angular/angular-hint-modules/issues/17\">here</a>).</p>\n<p>There are a couple more things that this module tries to warn you about and you can read about them <a href=\"https://github.com/angular/angular-hint-modules\">here</a>.</p>\n<h2>Controller hints</h2>\n<p>If there’s one thing you should embrace when working on a bigger Angular app and especially when working in a bigger team, are best practices. The Angular team <a href=\"https://docs.google.com/document/d/1XXMvReO8-Awi1EZXAXS4PzDzdNvV6pGcuaF4Q9821Es/pub\">published their style guide</a> for apps built with Angular internally at Google, that covers best practices and conventions.</p>\n<p>One of these best practices is, when naming controllers, to suffix them with <code class=\"language-text\">Controller</code> instead of using short names like <code class=\"language-text\">Ctrl</code>. <code class=\"language-text\">angular-hint</code> helps with that too. Let’s take a look what happens when we define a controller with a name that doesn’t have this suffix:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">angular.module(&#39;myApp&#39;, []).controller(&#39;AppCtrl&#39;, function () {\n\n});</code></pre></div>\n<p>Having a controller registered like this, <code class=\"language-text\">angular-hint</code> gives us the following warning:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Angular Hint: Controllers\n  The best practice is to name controllers ending with &#39;Controller&#39;.\n  Check the name of &#39;AppCtrl&#39;</code></pre></div>\n<p>I think this makes pretty much clear what can be achieved with such a tool. Having a style guide with conventions and best practices that everybody agrees on, makes a projects structure easier to understand and debug. With <code class=\"language-text\">angular-hint</code> we actually have a tool to embrace and encourage these best practices and conventions and this is just the start!</p>\n<h2>Directive hints</h2>\n<p>When dealing with directives, there are a couple of things that can go wrong and stop us from being productive because we have to debug (once again) why a given directive doesn’t seem to work. Similar to the example where we forgot to add our module dependency, it also happens quiet often, that we misspell directive names. When a directive name is misspelled, for Angular, this is just an attribute (or element) that it doesn’t know about, so it gets completely ignored.</p>\n<p>Just take a look at this small snippet:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;ul&gt;\n  &lt;li ng-repaet=&quot;i in [1,2,3,4]&quot;&gt;\n    &lt;!-- more dom goes here --&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;</code></pre></div>\n<p>As you can see, there’s a typo in the directive name. We actually wanted to type <code class=\"language-text\">ng-repeat</code>, but we typed <code class=\"language-text\">ng-repaet</code>. I can easily remember the last time, when I was debugging for an hour because I just misspelled a directive name. Because literally <strong>nothing</strong> happens.</p>\n<p>However, when <code class=\"language-text\">angular-hint</code> is activated, we get the following very useful warning:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Angular Hint: Directives\n  There was an AngularJS error in LI element.\n  Found incorrect attribute &quot;ng-repaet&quot; try &quot;ng-repeat&quot;</code></pre></div>\n<p>How cool is that? Not only that <code class=\"language-text\">angular-hint</code> warns me about an incorrect directive name and on what kind of element it is applied, it also suggests me a directive that is actually registered and to use! And now think about how much time you can save with such a helper.</p>\n<h2>Conclusion</h2>\n<p>Even if we took a look at just a few of all provided <code class=\"language-text\">angular-hint</code> modules and features, I’m pretty sure you get an idea how useful it is. Of course, it’s still in early development and has one or the other bug here and there, but the initial idea of having such a module that you can easily apply and tells you about all your possible mistakes, is just awesome.</p>\n<p>And again, this is just the start. I can’t even think of all the possibilities we have when extending the hint modules with additional functionality and hints. I could also imagine that this module could help out migrating from 1.x to 2.x in the future once the APIs are stable.</p>\n<p>However, you should go and try it out in your apps today. If you find any bugs, make sure to file them at the dedicated repositories on <a href=\"https://github.com/angular?query=angular-hint\">GitHub</a>, or fix them directly and send a pull request. Also, don’t hesitate to come up with new ideas on how the module could be extended. It’ll make all our lives easier!</p>","frontmatter":{"author":"pascal_precht","title":"Angular-hint in Angular 1.3","imageUrl":null,"date":"06 November 2014","summary":"In this article we are talking about the angular-hint module which makes our lifes easier when developing angular apps.","categories":["angularjs"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/angularjs/2014/11/06/exploring-angular-1.3-angular-hint.html","previous":{"fields":{"slug":"/announcements/2014/11/02/git-ninja-class-in-amsterdam.html"},"frontmatter":{"date":"2014/11/02","title":"Git Ninja Class in Amsterdam","categories":["announcements"]}},"next":{"fields":{"slug":"/git/2014/11/18/the-anatomy-of-a-git-commit.html"},"frontmatter":{"date":"2014/11/18","title":"The anatomy of a Git commit","categories":["git"]}}}}}