{"componentChunkName":"component---src-templates-blog-post-js","path":"/angularjs/2015/02/19/futuristic-routing-in-angular.html","webpackCompilationHash":"0c5d630095500f933ccd","result":{"data":{"site":{"siteMetadata":{"title":"Articles by thoughtram","authors":[{"id":"pascal_precht","name":"Pascal Precht","twitter":"PascalPrecht","img":"https://avatars2.githubusercontent.com/u/445106?s=460&v=4"},{"id":"christoph_burgdorf","name":"Christoph Burgdorf","twitter":"cburgdorf","img":"https://avatars0.githubusercontent.com/u/521109?s=460&v=4"},{"id":"dominic_elm","name":"Dominic Elm","twitter":"d3lm","img":"https://avatars0.githubusercontent.com/u/12571019?s=400&v=4"},{"id":"thomas_burleson","name":"Thomas Burleson","twitter":"thomasburleson","img":"https://avatars3.githubusercontent.com/u/210413?s=400&v=4"},{"id":"elvira_eulitz","name":"Elvira Eulitz","twitter":"ElviraEulitz","img":"https://avatars3.githubusercontent.com/u/29247040?s=400&v=4"},{"id":"maxim_koretskyi","name":"Maxim Koretskyi","twitter":"maxim_koretskyi","img":"https://avatars3.githubusercontent.com/u/6124091?s=400&v=4"}]}},"markdownRemark":{"id":"2cbde41c-b865-5a97-9096-459bd2bb2ef5","excerpt":"One of the latest announcements that counts as the most exciting ones, is that the Angular team implements a completely new router for the 2.0 release that is…","html":"<p>One of the latest announcements that counts as the most exciting ones, is that the Angular team implements a completely new router for the 2.0 release that is much more flexible and powerful than the original one. Especially, when it comes to more complex application structures. <a href=\"http://twitter.com/EisenbergEffect\">Rob Eisenberg</a>, creator of the recently announced <a href=\"http://aurelia.io\">aurelia</a> framework, gave an introduction talk on the new router at last years <a href=\"http://ng-europe.org\">ngEurope</a> conference and showed us the main concepts that make this router so much better.</p>\n<p>It got even better, when the team announced that they plan to back port the new router to the 1.x branch of the Angular framework and having it ready in time for the 1.3 release. Unfortunately it turned out, that it took a bit more effort to make the new router available for both projects, especially considering that both should share as much code as possible. <s>That’s why the back port has been postponed to the next bigger 1.4 release, which is targeted to be ready in March, this year (yay!)</s> The router also didn’t make it into the 1.4 release.</p>\n<p>That’s right, at the time of writing this article, the new router hasn’t been released yet. However, since we’re following the latest developments of all Angular version 2.0.0 related projects actively on GitHub, we can’t wait to share our thoughts on the new router with you. In this article we explore the new router and discuss it’s concepts and features that we’ve all been waiting for!</p>\n<h2>The Routing we know</h2>\n<p>Before we start off showing what the new router is going to look like, let’s recap what kind of routing Angular comes with. The Angular source tries to be as modular as possible. Code components, that aren’t necessary to get an Angular application running, but provide nice additional functionality that might be needed, are sliced into their own modules.</p>\n<p>And so is the basic Angular router. It’s implemented in the <code class=\"language-text\">ngRoute</code> module and can easily be installed through package managers like npm. Once installed, we can add it as module dependency to our application like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> app <span class=\"token operator\">=</span> angular<span class=\"token punctuation\">.</span><span class=\"token function\">module</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myApp'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'ngRoute'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>In order to configure routes for our application, we use the <code class=\"language-text\">$routeProvider</code> that we can access in our app’s config phase. <code class=\"language-text\">$routeProvider</code> comes with methods like <code class=\"language-text\">.when()</code> and <code class=\"language-text\">.otherwise()</code> to define which route maps to which controller and template. Here’s a quick example:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">config</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">$routeProvider</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  $routeProvider\n    <span class=\"token punctuation\">.</span><span class=\"token function\">when</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/welcome'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      template<span class=\"token punctuation\">:</span> <span class=\"token string\">'welcome.html'</span><span class=\"token punctuation\">,</span>\n      controller<span class=\"token punctuation\">:</span> <span class=\"token string\">'WelcomeController'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">otherwise</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/welcome'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>We can see very nicely that the route <code class=\"language-text\">/welcome</code> maps to the controller <code class=\"language-text\">WelcomeController</code> and the template <code class=\"language-text\">welcome.html</code>. In addition, if at runtime a route is given that is not covered by any <code class=\"language-text\">.when()</code> configuration, the app defaults to <code class=\"language-text\">/welcome</code> route, that’s what <code class=\"language-text\">.otherwise()</code> is for.</p>\n<p>If we have some additional dependencies that should be resolved before a route’s controller is instantiated, we can do that with the <code class=\"language-text\">resolve</code> property, which is an object literal that maps each member to a promise that either resolves or rejects later at runtime. These resolved dependencies are available to be injected in the controller instance. In order to instantiate the route’s controller, all specified promises need to resolve. If only one promise gets rejected, the route change is cancelled since the corresponding controller can’t be instantiated.</p>\n<p>Here’s an example where a promise needs to be resolved first, before a controller can be instantiated:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">config</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">$routeProvider</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  $routeProvider\n    <span class=\"token punctuation\">.</span><span class=\"token function\">when</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/welcome'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      template<span class=\"token punctuation\">:</span> <span class=\"token string\">'welcome.html'</span><span class=\"token punctuation\">,</span>\n      controller<span class=\"token punctuation\">:</span> <span class=\"token string\">'WelcomeController'</span><span class=\"token punctuation\">,</span>\n      resolve<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function-variable function\">person</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">WelcomeService</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span> WelcomeService<span class=\"token punctuation\">.</span><span class=\"token function\">getPerson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// returns a promise</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">otherwise</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/welcome'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">controller</span><span class=\"token punctuation\">(</span><span class=\"token string\">'WelcomeController'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">person</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// do something with person</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>If you’re not familiar with promises we’ve written an <a href=\"http://blog.thoughtram.io/angularjs/2014/12/18/exploring-angular-1.3-es6-style-promises.html\">article</a> that gives a brief introduction. Also, if this <code class=\"language-text\">resolve</code> property looks completely new to you we recommend reading the <a href=\"https://docs.angularjs.org/api/ngRoute/provider/$routeProvider\">official docs</a>.</p>\n<p>Let’s take a quick look at our main template to see where our route templates are loaded and rendered.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">ng-view</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>That’s it. One single entry point where, depending on our route, a template is loaded and it’s corresponding controller is instantiated. And here we already see the first weak points of Angular’s built-in routing implementation. The basic routing we get so far is just a simple URL to controller/template mapping. There’s no way to have sibling or nested components.</p>\n<p>Since <code class=\"language-text\">ngRoute</code> lacks such advanced routing features, the community has built their own router component, that solves all these problems - <a href=\"http://github.com/angular-ui/ui-router\">ui-router</a>.</p>\n<p>But of course, the Angular team is listening. And that’s why they implement a new more powerful router that is available for both, the <code class=\"language-text\">1.x</code> as well as the <code class=\"language-text\">2.x</code> branch.</p>\n<h2>Introducing the new router</h2>\n<p>You might have seen that Christoph and I gave a talk on ”<a href=\"http://thoughtram.io/the-best-angular-yet\">The Best Angular Yet!</a>” at Amsterdam’s Angular conference <a href=\"http://ng-nl.org\">NG-NL</a>. There we already gave a little sneak peak on what the new router will look like. At the time of writing this article and giving that presentation, the router was still in development, so things might have changed over time but we try to keep this article updated.</p>\n<p>The new router will be quite different. One of it’s main goals is that it works for both Angular <code class=\"language-text\">2.x</code> and Angular <code class=\"language-text\">&gt;=1.4</code>. That means, both need to share as much code as possible, since Angular version 2.0.0 is written in <s>AtScript</s> TypeScript. There are a couple more differences but we are going to take a look at them step by step.</p>\n<p>We can install the new router via npm by running the following shell command:</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ npm install angular-new-router</code></pre></div>\n<p>Once installed we can take a look at <code class=\"language-text\">node_modules/angular-new-router/dist/</code> and see that there are two versions of the router source - <code class=\"language-text\">router.es5.js</code> and <code class=\"language-text\">router.js</code>. The former one is an “angularfied” version of the router. So it’s basically the router code in ECMAScript 5 plus some additional Angular 1 specific components like service provider and directives. The latter one is the compiled AtScript code as AMD module so it can be used in other applications as well.</p>\n<p>Currently we are interested in the Angular 1 components, so what we need to do is to embed <code class=\"language-text\">router.es5.js</code> and add the new router module as dependency to our application like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> app <span class=\"token operator\">=</span> angular<span class=\"token punctuation\">.</span><span class=\"token function\">module</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myApp'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'ngComponentRouter'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Great! Next up: configuration. Here we’re going to encouter the first big difference when using the new router. As we know, in Angular 1 we have this <code class=\"language-text\">.config()</code> phase where we have access to service providers in order to configure services that are used later at runtime. That’s why we can use the <code class=\"language-text\">$routeProvider</code> of <code class=\"language-text\">ngRoute</code> to configure our routes.</p>\n<p>However, it turned out that there are a lot of problems with having a separation between configuration and run phases, which is why there won’t be such a thing in Angular >= 2.0.0. And so there isn’t in the new router. Now you might wonder how we are able to configure our routes with the new router, if there’s no provider that we can access during our application’s <code class=\"language-text\">.config()</code>.</p>\n<p>Well, let’s take a look at some code.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">controller</span><span class=\"token punctuation\">(</span><span class=\"token string\">'AppController'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">$router</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  $router<span class=\"token punctuation\">.</span><span class=\"token function\">config</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      path<span class=\"token punctuation\">:</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span>\n      component<span class=\"token punctuation\">:</span> <span class=\"token string\">'welcome'</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Oh what’s happening here? All we do is creating a new controller that asks for the <code class=\"language-text\">$router</code> service, which we use to configure itself. The configuration is pretty straight forward. We use <code class=\"language-text\">$router.config()</code> and pass it an array with configuration objects that each have a property <code class=\"language-text\">path</code> to set the route and a property <code class=\"language-text\">component</code> that sets the name of the component to be instantiated.</p>\n<p>We’re going to talk about what a component actually is in a second, but let’s first take a look at our template. So let’s assume we have an HTML document, this is what our application could look like:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span> <span class=\"token attr-name\">ng-app</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>myApp<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ng-controller</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>AppController<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ng-outlet</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ng-outlet</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Right, there’s no <code class=\"language-text\">&lt;ng-view&gt;</code> anymore. Instead the new router comes with a directive called <code class=\"language-text\">&lt;ng-outlet&gt;</code> which can also be used as an attribute in case it’s needed. An outlet basically is a “hole” where component templates are loaded into. So the above code in it’s current state is pretty much the same as using <code class=\"language-text\">&lt;ng-view&gt;</code> with the old routing system.</p>\n<p>But what gets loaded into our outlet you ask? Good question! This is where components come into play. When we configured the router, we said that the route <code class=\"language-text\">/</code> loads and instantiates the <code class=\"language-text\">welcome</code> component. But we haven’t talked about what the <code class=\"language-text\">welcome</code> component actually is.</p>\n<p><strong>A component</strong> in Angular 1, when using the new router, <strong>is a controller with a template and an optional router</strong> for that component. So if we say we have a <code class=\"language-text\">welcome</code> component, we need to create a corresponding controller and template for it. In fact, the new router already comes with a default configuration to load and instantiate components. This configuration behaves as follows:</p>\n<ul>\n<li>Load the component template asynchronously from <code class=\"language-text\">components/[COMPONENT_NAME]/[COMPONENT_NAME].html</code></li>\n<li>Instantiate <code class=\"language-text\">[COMPONENT_NAME]Controller</code></li>\n</ul>\n<p>Applying this to our configuration, it means that the router automatically tries to load <code class=\"language-text\">components/welcome/welcome.html</code> and instantiate <code class=\"language-text\">WelcomeController</code>.</p>\n<p>If we’re not okay with that configuration, we can simply override this default behaviour by using the <code class=\"language-text\">$componentMapperProvider</code> in our application configuration. It provides us with methods to configure the names of controllers to be instantiated as well as the paths from where to load component templates.</p>\n<p>The following code forces the router to load <code class=\"language-text\">[COMPONENT_NAME].html</code> instead of <code class=\"language-text\">components/[COMPONENT_NAME]/[COMPONENT_NAME].html</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">config</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">$componentMapperProvider</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  $componentMapperProvider<span class=\"token punctuation\">.</span><span class=\"token function\">setTemplateMapping</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// name == component name</span>\n    <span class=\"token keyword\">return</span> name <span class=\"token operator\">+</span> <span class=\"token string\">'.html'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Let’s create <code class=\"language-text\">WelcomeController</code> (for simplicity reasons I define the controller directly on <code class=\"language-text\">app</code> rather than introducing a new module for that component, but you can do that of course).</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">controller</span><span class=\"token punctuation\">(</span><span class=\"token string\">'WelcomeController'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>And here the corresponding template <code class=\"language-text\">welcome.html</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>Welcome!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>The component is now ready to be loaded and instantiated. </p>\n<h2>Adding behaviour to components</h2>\n<p>Now we have a component with a controller that doesn’t do anything. Adding behaviour to our component works the way we are used to it. We simply define methods and properties on a component’s controller.</p>\n<p>Just keep in mind that the new router enforces <code class=\"language-text\">controller as</code> syntax, which means we have to define our methods and properties on the controller itself instead of <code class=\"language-text\">$scope</code>. The controller is then exposed with the component name on the scope, which leads us to use <code class=\"language-text\">welcome</code> as controller reference in our template.</p>\n<p>As an example let’s add a property and method to our <code class=\"language-text\">WelcomeController</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">controller</span><span class=\"token punctuation\">(</span><span class=\"token string\">'WelcomeController'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'Pascal'</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">changeName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'Christoph'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>In our component template, we can access the controller properties via the <code class=\"language-text\">welcome</code> identifier like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>Welcome!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>Hello {{welcome.name}}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">ng-click</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>welcome.changeName()<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Change Name!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>If you’re not familiar with the <code class=\"language-text\">controller as</code> syntax. you might want to check out our article on <a href=\"/angularjs/2015/01/02/exploring-angular-1.3-bindToController.html\">Binding to Directive Controllers</a>. </p>\n<h2>Linking to other components</h2>\n<p>In order to have a very easy way to navigate from one component to another, the <code class=\"language-text\">ngComponentRouter</code> module comes with a <code class=\"language-text\">routerLink</code> directive that we can use to tell our application, where to navigate. Let’s say we have another component <code class=\"language-text\">user</code>, we’d extend our application with a new configuration for that component.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">controller</span><span class=\"token punctuation\">(</span><span class=\"token string\">'AppController'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">$router</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  $router<span class=\"token punctuation\">.</span><span class=\"token function\">config</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      path<span class=\"token punctuation\">:</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span>\n      component<span class=\"token punctuation\">:</span> <span class=\"token string\">'welcome'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      path<span class=\"token punctuation\">:</span> <span class=\"token string\">'/user'</span><span class=\"token punctuation\">,</span>\n      component<span class=\"token punctuation\">:</span> <span class=\"token string\">'user'</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>And as we’ve learned, we also need a corresponding controller and template to actually assemble our component. Here’s our <code class=\"language-text\">UserController</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">controller</span><span class=\"token punctuation\">(</span><span class=\"token string\">'UserController'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>And here’s the template <code class=\"language-text\">user.html</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>User<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Now, in order to get there from our <code class=\"language-text\">welcome</code> component, all we have to do is to add an anchor tag to our <code class=\"language-text\">welcome</code> component template and us the <code class=\"language-text\">routerLink</code> directive accordingly.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>Welcome!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>Hello {{welcome.name}}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">ng-click</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>welcome.changeName()<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Change Name!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">ng-link</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>user<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>User View<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>As you can see, we don’t have to set an <code class=\"language-text\">href</code> attribute, since <code class=\"language-text\">routerLink</code> takes care of that. The directive itself takes a component name to navigate to once the link is clicked, which in our case is `user.</p>\n<h2>Linking with dynamic parameters</h2>\n<p>Of course, just navigating to a component in some cases isn’t enough. We might have routes that take some additional parameters in order to post process that data accordingly. Our <code class=\"language-text\">user</code> component doesn’t do anything right now, but we might want to display some data of a certain user depending on a given user id.</p>\n<p>Configuring a route that expects query parameters works pretty similar to what we already know when doing that with the original router. We can define placeholders in our route definition by using the <code class=\"language-text\">:</code> symbol followed by an identifer that is used to later expose the value of that placeholder in a dedicated <code class=\"language-text\">$routeParams</code> service.</p>\n<p>To get a better idea, here’s our updated route configuration that takes an additional user id parameter:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">controller</span><span class=\"token punctuation\">(</span><span class=\"token string\">'AppController'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">$router</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  $router<span class=\"token punctuation\">.</span><span class=\"token function\">config</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      path<span class=\"token punctuation\">:</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span>\n      component<span class=\"token punctuation\">:</span> <span class=\"token string\">'welcome'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      path<span class=\"token punctuation\">:</span> <span class=\"token string\">'/user/:userId'</span><span class=\"token punctuation\">,</span>\n      component<span class=\"token punctuation\">:</span> <span class=\"token string\">'user'</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Simple right? As already mentioned, query parameter are exposed on the <code class=\"language-text\">$routeParams</code> service as simple hash. Which means, in order to access a given user id from that route, all we have to do is to inject <code class=\"language-text\">$routeParams</code> into our component’s controller and ask for the paramters we’re looking for.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">controller</span><span class=\"token punctuation\">(</span><span class=\"token string\">'UserController'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">$routeParams</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>userId <span class=\"token operator\">=</span> $routeParams<span class=\"token punctuation\">.</span>userId<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Okay cool. But how do we <strong>link</strong> to a component that takes parameters? We’ve learned that <code class=\"language-text\">ngComponentRouter</code> comes with a <code class=\"language-text\">routerLink</code> directive that takes a component name. It turns out, we can set parameters, for a route we want to navigate to, with that directive too! All we need to do is to pass a hash literal to specify the values. Here’s our updated <code class=\"language-text\">welcome</code> component template:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>Welcome!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>Hello {{welcome.name}}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">ng-click</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>welcome.changeName()<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Change Name!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">ng-link</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>user({ userId: 3 })<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>User View<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h2>Sibling Components</h2>\n<p>What we’ve done so far is not a very complex scenario, nor does it show the advantage over Angular’s basic routing with <code class=\"language-text\">ngRoute</code>. There are other scenarios where the power of the new router really shines. One of them is being able to have sibling components per route. Exactly, we’re finally able to load more than one component at a time!</p>\n<p>Imagine, when a user visits our app, we not only want to have a <code class=\"language-text\">welcome</code> component be loaded, we want to spin up another component for our navigation as well. So we end up with two components at the same time for one single route - <code class=\"language-text\">navigation</code> and <code class=\"language-text\">welcome</code>. We can configure our <code class=\"language-text\">$router</code> accordingly by specifying a <code class=\"language-text\">components</code> property which describes what components should be loaded for which outlet. Let’s see how that works.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">controller</span><span class=\"token punctuation\">(</span><span class=\"token string\">'AppController'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">$router</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  $router<span class=\"token punctuation\">.</span><span class=\"token function\">config</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      path<span class=\"token punctuation\">:</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span>\n      components<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        navigation<span class=\"token punctuation\">:</span> <span class=\"token string\">'navigation'</span><span class=\"token punctuation\">,</span>\n        main<span class=\"token punctuation\">:</span> <span class=\"token string\">'welcome'</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Here we see that we expect <em>two</em> outlets <code class=\"language-text\">navigation</code> and <code class=\"language-text\">main</code> and we say that we want to load the <code class=\"language-text\">navigation</code> and <code class=\"language-text\">welcome</code> component respectively. Of course, we now need a <code class=\"language-text\">NavigationController</code> and <code class=\"language-text\">navigation.html</code> to make this work. Here’s a simple controller with an even simpler template:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">controller</span><span class=\"token punctuation\">(</span><span class=\"token string\">'NavigationController'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span>Navigation<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>Yay, navigation goes here.<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Now we need to decide, <em>where</em> our components are actually rendered. We’ve learned that a component has outlets, in fact, a component can have multiple outlets. In our router configuration we said we have an outlet <code class=\"language-text\">navigation</code> and <code class=\"language-text\">main</code>. All we need to do is to use the <code class=\"language-text\">&lt;ng-outlet&gt;</code> directive multiple times and give them the names accordingly.</p>\n<p>Here’s our updated <code class=\"language-text\">index.html</code> that now introduces two outlets, one for each component specified in the router configuration:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span> <span class=\"token attr-name\">ng-app</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>myApp<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ng-controller</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>AppController<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>nav</span> <span class=\"token attr-name\">ng-outlet</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>navigation<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>nav</span><span class=\"token punctuation\">></span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>main</span> <span class=\"token attr-name\">ng-outlet</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>main<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>main</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>That’s it! Running this code in the browser shows that now two sibling components are loaded for one route.</p>\n<h2>So much more to talk about</h2>\n<p>Following the development on the new router and also actively contributing to it, there’ve been a couple of questions popping up that we haven’t covered in this article yet. In fact, most of them aren’t answered yet but you can follow them on GitHub since we’ve created issues accordingly. To give you an idea of what questions we are talking about, we’ve asked ourself for example if a <a href=\"https://github.com/angular/router/issues/117\">component can have it’s own sub components and outlets</a> or <a href=\"https://github.com/angular/router/issues/118\">how to link to routes that have multiple outlets</a>.</p>\n<p>We also haven’t talked about nested routing and or if there’s a <a href=\"https://github.com/angular/router/issues/100\"><code class=\"language-text\">resolve</code> equivalent</a> in the new router, but once we have answers to all these questions, we either going to update this article or write separate ones that cover each topic isolated.</p>\n<p>In the meantime check out the official <a href=\"http://github.com/angular/router\">repository</a> or take a look at the <a href=\"http://angular.github.io/router/\">online documentation</a>. Don’t forget to contribute, we always need your help!</p>","frontmatter":{"author":"pascal_precht","title":"Futuristic Routing in Angular","imageUrl":null,"date":"19 February 2015","summary":"An this article we discuss the new router APIs and how it's going to change the way we implement component based routing in our Angular applications.","categories":["angularjs"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/angularjs/2015/02/19/futuristic-routing-in-angular.html","previous":{"fields":{"slug":"/git/rebase-book/2015/02/10/understanding-branches-in-git.html"},"frontmatter":{"date":"2015/02/10","title":"Understanding branches in Git","categories":["git","rebase-book"]}},"next":{"fields":{"slug":"/angularjs/2015/02/21/around-the-globe.html"},"frontmatter":{"date":"2015/02/21","title":"Around the globe","categories":["angularjs"]}}}}}